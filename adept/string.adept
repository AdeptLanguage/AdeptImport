
pragma deprecated

import "sys/cstdlib.adept"
import "sys/cstring.adept"

struct string (data *ubyte, length usize)

func equals(in a *ubyte, in b *ubyte) bool {
	a_length usize = length(a)
	b_length usize = length(b)

	unless a_length == b_length, return false

	iterator usize = 0; until iterator == a_length {
		unless *a == *b, return false
		a += cast *ubyte 1
		b += cast *ubyte 1
		iterator += 1
	}

	return true
}

func equals(a string, b string) bool {
	length usize = a.length
	unless length == b.length, return false

	index usize = 0
	a_iterator *ubyte = a.data
	b_iterator *ubyte = b.data

	until index == length {
		unless *a_iterator == *b_iterator, return false
		a_iterator += cast *ubyte 1
		b_iterator += cast *ubyte 1
		index += 1
	}

	return true
}

func copy(destination *ubyte, target *ubyte) void {
	memcpy(destination, target, length(target) + 1)
}

func copy(destination string, target string) void {
	destination.length = target.length
	memcpy(destination.data, target.data, target.length + 1)
}

func append(destination *ubyte, target *ubyte) void {
	destination_length usize = length(destination)
	target_length usize = length(target)
	memcpy(destination + cast ptr destination_length, target, target_length + 1)
}

func append(destination string, target string) void {
	memcpy(destination.data + cast ptr destination.length, target.data, target.length + 1)
}

func join(a *ubyte, b *ubyte) *ubyte {
	a_length usize = length(a)
	b_length usize = length(b)
	joined *ubyte = malloc(a_length + b_length + 1)

	if joined == null, return null

	memcpy(joined, a, a_length)
	memcpy(joined + cast ptr a_length, b, b_length + 1)
	return joined
}

func join(a string, b string) string {
	joined string
	joined.length = a.length + b.length
	joined.data = malloc(joined.length + 1)

	if joined.data == null, joined.length = 0; return joined

	memcpy(joined.data, a.data, a.length)
	memcpy(joined.data + cast ptr a.length, b.data, b.length + 1)
	return joined
}

func clone(target *ubyte) *ubyte {
	target_size usize = length(target) + 1
	clone *ubyte = malloc(target_size)

	if clone == null, return null

	memcpy(clone, target, target_size)
	return clone
}

func clone(target string) string {
	clone string
	clone.data = malloc(target.length + 1uz)
	clone.length = target.length

	if clone.data == null, clone.length = 0; return clone

	memcpy(clone.data, target.data, target.length)
	return clone
}

func length(target *ubyte) usize {
	length usize = 0; until target[length] == 0ub {
		length += 1
	}
	return length
}
