
pragma deprecated

import "sys/cmath.adept"
import "sys/cstdio.adept"
import "sys/cstdlib.adept"

struct Vector3f (x float, y float, z float)

func set(this *Vector3f, other Vector3f) void {
    this.x = other.x
    this.y = other.y
    this.z = other.z
}

func set(this *Vector3f, x float, y float, z float) void {
    this.x = x
    this.y = y
    this.z = z
}

func add(this *Vector3f, other Vector3f) void {
    this.x += other.x
    this.y += other.y
    this.z += other.z
}

func subtract(this *Vector3f, other Vector3f) void {
    this.x -= other.x
    this.y -= other.y
    this.z -= other.z
}

func multiply(this *Vector3f, other Vector3f) void {
    this.x *= other.x
    this.y *= other.y
    this.z *= other.z
}

func negate(this *Vector3f) void {
    this.x *= -1.0f
    this.y *= -1.0f
    this.z *= -1.0f
}

func scale(this *Vector3f, amount float) void {
    this.x *= amount
    this.y *= amount
    this.z *= amount
}

func normalize(this *Vector3f) void {
    x float = this.x
    y float = this.y
    z float = this.z
    len float = sqrtf(x * x + y * y + z * z)

    if len == 0.0f, this.set(0.0f, 0.0f, 0.0f); return
    else if len == 1.0f, return

    len = 1.0f / len
    this.set(x * len, y * len, z * len)
}

func cross(this *Vector3f, other Vector3f) void {
    x_a float = this.x
    y_a float = this.y
    z_a float = this.z
    x_b float = other.x
    y_b float = other.y
    z_b float = other.z

    this.x = y_a * z_b - z_a * y_b
    this.y = z_a * x_b - x_a * z_b
    this.z = x_a * y_b - y_a * x_b
}

func length(this *Vector3f) float {
    x float = this.x
    y float = this.y
    z float = this.z
    return sqrtf(x * x + y * y + z * z)
}

func dot(this *Vector3f, other Vector3f) float {
    return this.x * other.x + this.y * other.y + this.z * other.z
}

func direction(this *Vector3f, other Vector3f) void {
    x float = this.x - other.x
    y float = this.y - other.y
    z float = this.z - other.z
    len float = sqrtf(x * x + y * y + z * z)

    if len == 0.0f, this.set(0.0f, 0.0f, 0.0f); return

    len = 1.0f / len
    this.set(x * len, y * len, z * len)
}

func lerp(this *Vector3f, other Vector3f, lerp float) void {
    this.x += lerp * (other.x - this.x)
    this.y += lerp * (other.y - this.y)
    this.z += lerp * (other.z - this.z)
}

func lerp(this *Vector3f, other Vector3f) void {
    this.lerp(other, 0.5f)
}

func distance(this *Vector3f, other Vector3f) float {
    x float = other.x - this.x
    y float = other.y - this.y
    z float = other.z - this.z
    return sqrtf(x * x + y * y + z * z)
}

func print(this *Vector3f) void {
    printf('Vector3f {%f, %f, %f}\n', cast double this.x, cast double this.y, cast double this.z)
}
