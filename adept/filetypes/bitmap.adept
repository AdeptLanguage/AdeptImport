
pragma deprecated

import 'sys/cstdio.adept'
import 'sys/cstdlib.adept'

packed struct BitmapInfo (bitmap_size int,
    width int, height int, color_planes short,
    bitcount short, compression_type int, bytes uint,
    pixels_per_meter_x int, pixels_per_meter_y int,
    colors_used int, important_colors int)

packed struct BitmapFileHeader (bitmap_type short,
    bitmap_size int, bitmap_res1 short, bitmap_res2 short,
    offset int)

func loadBitmap(filename *ubyte, info *BitmapInfo) *ubyte {
    file *FILE
    file_header BitmapFileHeader
    image *ubyte
    image_index int = 0

    file = fopen(filename, 'rb')
    if file == null, return null

    fread(&file_header, 14uz, 1uz, file)
    if file_header.bitmap_type != 19778ss, fclose(file); return null

    fread(info, 40uz, 1uz, file)
    fseek(file, file_header.offset, SEEK_SET)

    image = malloc(cast usize info.bytes)
    fread(image, cast usize info.bytes, 1uz, file)

    fclose(file)
    return image
}

func loadBitmapABGR(filename *ubyte, info *BitmapInfo) *ubyte {
    file *FILE
    file_header BitmapFileHeader
    image *ubyte
    image_index int = 0
    temp_bgra ubyte

    file = fopen(filename, 'rb')
    if file == null, return null

    fread(&file_header, 14uz, 1uz, file)

    if file_header.bitmap_type != 19778ss, fclose(file); return null

    fread(info, 40uz, 1uz, file)
    fseek(file, file_header.offset, SEEK_SET)

    image = malloc(cast usize info.bytes)
    fread(image, cast usize info.bytes, 1uz, file)
    if image == null, fclose(file); return null

    while cast uint image_index != info.bytes {
        temp_bgra = image[image_index]
        image[image_index] = image[image_index+1]
        image[image_index+1] = image[image_index+2]
        image[image_index+2] = image[image_index+3]
        image[image_index+3] = temp_bgra

        image_index = image_index + 4
    }

    fclose(file)
    return image
}
