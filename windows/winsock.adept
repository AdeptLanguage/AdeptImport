
pragma windows_only

foreign 'libws2_32.a'

struct WSADATA (
    wVersion       short,
    wHighVersion   short,
    iMaxSockets    ushort,
    iMaxUdpDg      ushort,
    lpVendorInfo   *ubyte,
    szDescription  257 ubyte,
    szSystemStatus 129 ubyte
)

// NOTE: 'ai_next' is of type 'ptr' because the compiler can't handle self-referencing pointer '*addrinfo'
// Isaac Shelton - Nov 5th 2019
struct addrinfo (
    ai_flags int,
    ai_family int,
    ai_socktype int,
    ai_protocol int,
    ai_addrlen usize,
    ai_canonname *ubyte,
    ai_addr *sockaddr,
    ai_next ptr
)

struct sockaddr (sa_family ushort, sa_data 14 ubyte)
struct sockaddr_in (sin_family short, sin_port ushort, sin_addr in_addr, sin_zero 8 ubyte)

struct in_addr (s_addr uint)
struct in_addr_uint_version (S_addr uint)
struct in_addr_words_version (s_w1, s_w2 ushort)
struct in_addr_bytes_version (s_b1, s_b2, s_b3, s_b4 ubyte)

struct hostent (h_name *ubyte, h_aliases **ubyte, h_addrtype short, h_length short, h_addr_list **ubyte)
struct netent (n_name *ubyte, n_aliases **ubyte, n_addrtype short, n_net uint)
struct servent (s_name *ubyte, s_aliases **ubyte, s_proto *ubyte, s_port short)
struct protoent (p_name *ubyte, p_aliases **ubyte, p_proto short)

struct timeval (tv_sec int, tv_usec int)

alias SOCKET = *uint

INVALID_SOCKET == cast SOCKET 0xFFFFFFFFFFFFFFFFFFul
SOCKET_ERROR == -1

AI_PASSIVE                == 0x00000001
AI_CANONNAME              == 0x00000002
AI_NUMERICHOST            == 0x00000004
AI_NUMERICSERV            == 0x00000008
AI_ALL                    == 0x00000100
AI_ADDRCONFIG             == 0x00000400
AI_V4MAPPED               == 0x00000800
AI_NON_AUTHORITATIVE      == 0x00004000
AI_SECURE                 == 0x00008000
AI_RETURN_PREFERRED_NAMES == 0x00010000
AI_FQDN                   == 0x00020000
AI_FILESERVER             == 0x00040000

SOCK_STREAM    == 1
SOCK_DGRAM     == 2
SOCK_RAW       == 3
SOCK_RDM       == 4
SOCK_SEQPACKET == 5

IPPROTO_IP       == 0
IPPROTO_HOPOPTS  == 0
IPPROTO_ICMP     == 1
IPPROTO_IGMP     == 2
IPPROTO_GGP      == 3
IPPROTO_IPV4     == 4
IPPROTO_TCP      == 6
IPPROTO_PUP      == 12
IPPROTO_UDP      == 17
IPPROTO_IDP      == 22
IPPROTO_IPV6     == 41
IPPROTO_ROUTING  == 43
IPPROTO_FRAGMENT == 44
IPPROTO_ESP      == 50
IPPROTO_AH       == 51
IPPROTO_ICMPV6   == 58
IPPROTO_NONE     == 59
IPPROTO_DSTOPTS  == 60
IPPROTO_ND       == 77
IPPROTO_ICLFXBM  == 78
IPPROTO_RAW      == 255
IPPROTO_MAX      == 256

AF_UNSPEC     == 0
AF_UNIX       == 1
AF_INET       == 2
AF_IMPLINK    == 3
AF_PUP        == 4
AF_CHAOS      == 5
AF_NS         == 6
AF_IPX        == AF_NS
AF_ISO        == 7
AF_OSI        == AF_ISO
AF_ECMA       == 8
AF_DATAKIT    == 9
AF_CCITT      == 10
AF_SNA        == 11
AF_DECnet     == 12
AF_DLI        == 13
AF_LAT        == 14
AF_HYLINK     == 15
AF_APPLETALK  == 16
AF_NETBIOS    == 17
AF_VOICEVIEW  == 18
AF_FIREFOX    == 19
AF_UNKNOWN1   == 20
AF_BAN        == 21
AF_ATM        == 22
AF_INET6      == 23
AF_CLUSTER    == 24
AF_12844      == 25
AF_IRDA       == 26
AF_NETDES     == 28
AF_TCNPROCESS == 29
AF_TCNMESSAGE == 30
AF_ICLFXBM    == 31
AF_BTH        == 32
AF_MAX        == 33

SOMAXCONN == 0x7FFFFFFF

WINSOCK_1_0 == 1us
WINSOCK_1_1 == 257us
WINSOCK_2_0 == 2us
WINSOCK_2_1 == 258us
WINSOCK_2_2 == 514us

func IN_CLASSA(i uint) bool = (i & 0x80000000) == 0
IN_CLASSA_NET == 0xff000000
IN_CLASSA_NSHIFT == 24
IN_CLASSA_HOST == 0x00ffffff
IN_CLASSA_MAX == 128

func IN_CLASSB(i uint) bool = (i & 0xc0000000) == 0x80000000
IN_CLASSB_NET == 0xffff0000
IN_CLASSB_NSHIFT == 16
IN_CLASSB_HOST == 0x0000ffff
IN_CLASSB_MAX == 65536

func IN_CLASSC(i uint) bool = (i & 0xe0000000) == 0xc0000000
IN_CLASSC_NET == 0xffffff00
IN_CLASSC_NSHIFT == 8
IN_CLASSC_HOST == 0x000000ff

INADDR_ANY == 0x00000000
INADDR_LOOPBACK == 0x7f000001
INADDR_BROADCAST == 0xffffffff
INADDR_NONE == 0xffffffff

SOL_SOCKET == 0xffff

SO_DEBUG                 == 0x0001
SO_ACCEPTCONN            == 0x0002
SO_REUSEADDR             == 0x0004
SO_KEEPALIVE             == 0x0008
SO_DONTROUTE             == 0x0010
SO_BROADCAST             == 0x0020
SO_USELOOPBACK           == 0x0040
SO_LINGER                == 0x0080
SO_OOBINLINE             == 0x0100
SO_DONTLINGER            == ~SO_LINGER
SO_SNDBUF                == 0x1001
SO_RCVBUF                == 0x1002
SO_SNDLOWAT              == 0x1003
SO_RCVLOWAT              == 0x1004
SO_SNDTIMEO              == 0x1005
SO_RCVTIMEO              == 0x1006
SO_ERROR                 == 0x1007
SO_TYPE                  == 0x1008
SO_CONNDATA              == 0x7000
SO_CONNOPT               == 0x7001
SO_DISCDATA              == 0x7002
SO_DISCOPT               == 0x7003
SO_CONNDATALEN           == 0x7004
SO_CONNOPTLEN            == 0x7005
SO_DISCDATALEN           == 0x7006
SO_DISCOPTLEN            == 0x7007
SO_OPENTYPE              == 0x7008
SO_SYNCHRONOUS_ALERT     == 0x10
SO_SYNCHRONOUS_NONALERT  == 0x20
SO_MAXDG                 == 0x7009
SO_MAXPATHDG             == 0x700A
SO_UPDATE_ACCEPT_CONTEXT == 0x700B
SO_CONNECT_TIME          == 0x700C
TCP_NODELAY              == 0x0001
TCP_BSDURGENT            == 0x7000

FIONREAD == 1074030207
FIONBIO == -2147195266
FIOASYNC == -2147195267
SIOCSHIWAT == -2147192064
SIOCGHIWAT == 1074033409
SIOCSLOWAT == -2147192062
SIOCGLOWAT == 1074033411
SIOCATMARK == 1074033415

alias socklen_t = int

foreign WSAStartup(ushort, *WSADATA) int
foreign getaddrinfo(*ubyte, *ubyte, *addrinfo, **addrinfo) int
foreign WSACleanup() void
foreign socket(int, int, int) SOCKET
foreign freeaddrinfo(*addrinfo) void
foreign bind(SOCKET, *sockaddr, int) int
foreign closesocket(SOCKET) int
foreign listen(SOCKET, int) int
foreign accept(SOCKET, *sockaddr, *int) SOCKET
foreign recv(SOCKET, ptr, int, int) int
foreign connect(SOCKET, *sockaddr, int) int
foreign send(SOCKET, ptr, int, int) int
foreign ioctlsocket(SOCKET, long, *uint) int
foreign getpeername(SOCKET, *sockaddr, *int) int
foreign getsockname(SOCKET, *sockaddr, *int) int;
foreign getsockopt(SOCKET, int, int, ptr, *int) int
foreign inet_addr(*ubyte) uint
foreign inet_ntoa(in_addr) *ubyte
foreign recvfrom(SOCKET, ptr, int, int, *sockaddr, *int) int
foreign sendto(SOCKET, ptr, int, int, *sockaddr, int) int
foreign setsockopt(SOCKET, int, int, ptr, socklen_t) int
foreign shutdown(SOCKET, int) int
foreign select(int, *fd_set, *fd_set, *fd_set, *timeval) int

foreign gethostbyaddr(*ubyte, int, int) *hostent
foreign gethostbyname(*ubyte) *hostent
foreign gethostname(*ubyte, int) int
foreign getservbyport(int, *ubyte) *servent
foreign getservbyname(*ubyte, *ubyte) *servent
foreign getprotobynumber(int) *protoent
foreign getprotobyname(*ubyte) *protoent

FD_SETSIZE == 64

struct fd_set (fd_count uint, fd_array 64 SOCKET)
foreign __WSAFDIsSet(SOCKET, *fd_set) int

func FD_CLR(fd SOCKET, set *fd_set) {
    repeat set.fd_count, if set.fd_array[idx] == fd {
        while idx < set.fd_count - 1 {
            set.fd_array[idx] = set.fd_array[idx + 1]
            idx++
        }
        set.fd_count--
        break
    }
}

func FD_SET(fd SOCKET, set *fd_set) {
    if set.fd_count < FD_SETSIZE, set.fd_array[set.fd_count++] = fd
}

func FD_ZERO(set *fd_set) {
    set.fd_count = 0
}

func FD_ISSET(fd SOCKET, set *fd_set) int {
    return __WSAFDIsSet(fd, set)
}

WSABASEERR == 10000
foreign WSAGetLastError() int

WSAEINTR                         == 10004
WSAEBADF                         == 10009
WSAEACCES                        == 10013
WSAEFAULT                        == 10014
WSAEINVAL                        == 10022
WSAEMFILE                        == 10024
WSAEWOULDBLOCK                   == 10035
WSAEINPROGRESS                   == 10036
WSAEALREADY                      == 10037
WSAENOTSOCK                      == 10038
WSAEDESTADDRREQ                  == 10039
WSAEMSGSIZE                      == 10040
WSAEPROTOTYPE                    == 10041
WSAENOPROTOOPT                   == 10042
WSAEPROTONOSUPPORT               == 10043
WSAESOCKTNOSUPPORT               == 10044
WSAEOPNOTSUPP                    == 10045
WSAEPFNOSUPPORT                  == 10046
WSAEAFNOSUPPORT                  == 10047
WSAEADDRINUSE                    == 10048
WSAEADDRNOTAVAIL                 == 10049
WSAENETDOWN                      == 10050
WSAENETUNREACH                   == 10051
WSAENETRESET                     == 10052
WSAECONNABORTED                  == 10053
WSAECONNRESET                    == 10054
WSAENOBUFS                       == 10055
WSAEISCONN                       == 10056
WSAENOTCONN                      == 10057
WSAESHUTDOWN                     == 10058
WSAETOOMANYREFS                  == 10059
WSAETIMEDOUT                     == 10060
WSAECONNREFUSED                  == 10061
WSAELOOP                         == 10062
WSAENAMETOOLONG                  == 10063
WSAEHOSTDOWN                     == 10064
WSAEHOSTUNREACH                  == 10065
WSAENOTEMPTY                     == 10066
WSAEPROCLIM                      == 10067
WSAEUSERS                        == 10068
WSAEDQUOT                        == 10069
WSAESTALE                        == 10070
WSAEREMOTE                       == 10071
WSASYSNOTREADY                   == 10091
WSAVERNOTSUPPORTED               == 10092
WSANOTINITIALISED                == 10093
WSAEDISCON                       == 10101
WSAENOMORE                       == 10102
WSAECANCELLED                    == 10103
WSAEINVALIDPROCTABLE             == 10104
WSAEINVALIDPROVIDER              == 10105
WSAEPROVIDERFAILEDINIT           == 10106
WSASYSCALLFAILURE                == 10107
WSASERVICE_NOT_FOUND             == 10108
WSATYPE_NOT_FOUND                == 10109
WSA_E_NO_MORE                    == 10110
WSA_E_CANCELLED                  == 10111
WSAEREFUSED                      == 10112
WSAHOST_NOT_FOUND                == 11001
WSATRY_AGAIN                     == 11002
WSANO_RECOVERY                   == 11003
WSANO_DATA                       == 11004
WSA_QOS_RECEIVERS                == 11005
WSA_QOS_SENDERS                  == 11006
WSA_QOS_NO_SENDERS               == 11007
WSA_QOS_NO_RECEIVERS             == 11008
WSA_QOS_REQUEST_CONFIRMED        == 11009
WSA_QOS_ADMISSION_FAILURE        == 11010
WSA_QOS_POLICY_FAILURE           == 11011
WSA_QOS_BAD_STYLE                == 11012
WSA_QOS_BAD_OBJECT               == 11013
WSA_QOS_TRAFFIC_CTRL_ERROR       == 11014
WSA_QOS_GENERIC_ERROR            == 11015
WSA_QOS_ESERVICETYPE             == 11016
WSA_QOS_EFLOWSPEC                == 11017
WSA_QOS_EPROVSPECBUF             == 11018
WSA_QOS_EFILTERSTYLE             == 11019
WSA_QOS_EFILTERTYPE              == 11020
WSA_QOS_EFILTERCOUNT             == 11021
WSA_QOS_EOBJLENGTH               == 11022
WSA_QOS_EFLOWCOUNT               == 11023
WSA_QOS_EUNKOWNPSOBJ             == 11024
WSA_QOS_EPOLICYOBJ               == 11025
WSA_QOS_EFLOWDESC                == 11026
WSA_QOS_EPSFLOWSPEC              == 11027
WSA_QOS_EPSFILTERSPEC            == 11028
WSA_QOS_ESDMODEOBJ               == 11029
WSA_QOS_ESHAPERATEOBJ            == 11030
WSA_QOS_RESERVED_PETYPE          == 11031
WSA_SECURE_HOST_NOT_FOUND        == 11032
WSA_IPSEC_NAME_POLICY_ERROR      == 11033

import 'machine/endian.adept'

#if __little_endian__
    func htonl(x uint) uint = swapEndiannessUInt(x)
    func ntohl(x uint) uint = swapEndiannessUInt(x)
    func htons(x ushort) ushort = swapEndiannessUShort(x)
    func ntohs(x ushort) ushort = swapEndiannessUShort(x)
    func hton64(x ulong) ulong = swapEndiannessULong(x)
    func ntoh64(x ulong) ulong = swapEndiannessULong(x)
#else
    func htonl(x uint) uint = x
    func ntohl(x uint) uint = x
    func htons(x ushort) ushort = x
    func ntohs(x ushort) ushort = x
    func hton64(x ulong) ulong = x
    func ntoh64(x ulong) ulong = x
#end
