
#default log_string_deletion false

import 'sys/cstdio.adept'
import 'sys/cstring.adept'
import 'parse.adept'

enum StringOwnership (REFERENCE, OWN, GIVEN, DONATED)
alias StringView = String

struct String (
    array *ubyte,   length usize,
    capacity usize, ownership StringOwnership
)

func __defer__(this *String) void {        
    if this.ownership == StringOwnership::OWN || this.ownership == StringOwnership::GIVEN {
        #if log_string_deletion
            printf('[String Deletion] "')
            repeat this.length, putchar(this.array[idx])
            putchar('"'ub)
            putchar(0x0A)
        #end
        
        delete this.array
        this.array = null
        this.length = 0
        this.capacity = 0
        this.ownership = StringOwnership::REFERENCE
    }
}

func __pass__(string POD String) String {
    if      string.ownership == StringOwnership::OWN,   string.ownership = StringOwnership::REFERENCE
    else if string.ownership == StringOwnership::GIVEN, string.ownership = StringOwnership::OWN
    
    return string
}

func __assign__(this *String, other POD String) void {
    switch other.ownership {
    case StringOwnership::OWN
        this.__defer__()
        this.array = other.array
        this.length = other.length
        this.capacity = other.capacity
        this.ownership = StringOwnership::REFERENCE
        return
    case StringOwnership::DONATED
        this.__defer__()
        this.array = other.array
        this.length = other.length
        this.capacity = other.capacity
        this.ownership = StringOwnership::DONATED
    case StringOwnership::GIVEN
        this.__defer__()
        this.array = other.array
        this.length = other.length
        this.capacity = other.capacity
        this.ownership = StringOwnership::OWN
        return
    case StringOwnership::REFERENCE
        if (this.ownership == StringOwnership::OWN) && (other.array >= this.array) && (other.array < this.array + this.capacity as ptr) {
            array *ubyte = new ubyte * other.length
            memcpy(array, other.array, other.length)
            
            delete this.array
            this.array = array
            this.length = other.length
            this.capacity = other.capacity
            this.ownership = StringOwnership::OWN
            return
        }
        
        this.__defer__()
        this.array = other.array
        this.length = other.length
        this.capacity = other.capacity
        this.ownership = StringOwnership::REFERENCE
        return
    }
}

func __equals__(lhs String, rhs String) bool {
    if lhs.length != rhs.length, return false
    repeat static lhs.length, if lhs.array[idx] != rhs.array[idx], return false
    return true
}

func __add__(lhs String, rhs String) String {
    together POD String = undef
    
    together.length = lhs.length + rhs.length
    together.array = new ubyte * together.length
    memcpy(together.array, lhs.array, lhs.length)
    memcpy(together.array at lhs.length, rhs.array, rhs.length)
    
    together.capacity = together.length
    together.ownership = StringOwnership::GIVEN
    return together
}

func __add__(lhs String, rhs ubyte) String {
    together POD String = undef
    
    together.length = lhs.length + 1
    together.array = new ubyte * together.length
    memcpy(together.array, lhs.array, lhs.length)
    together.array[lhs.length] = rhs
    
    together.capacity = together.length
    together.ownership = StringOwnership::GIVEN
    return together
}

func __add__(lhs POD String, rhs $T~__primitive__) String {
    return lhs + toString(rhs)
}

func __multiply__(lhs String, times int) String {
    result POD String = undef
    
    if times > 0 {
        result.length = lhs.length * times
        result.array = new ubyte * result.length
        
        repeat times,
            memcpy(result.array at (lhs.length * idx), lhs.array, lhs.length)
    } else if times == 0 {
        result.array = null
        result.length = 0
        result.capacity = 0
        result.ownership = StringOwnership::REFERENCE
        return result
    } else {
        times = 0 - times
        result.length = lhs.length * times
        result.array = new ubyte * result.length
        
        reversed String = lhs.reversed()
        
        repeat times,
            memcpy(result.array at (reversed.length * idx), reversed.array, reversed.length)
    }
    
    result.capacity = result.length
    result.ownership = StringOwnership::GIVEN
    return result
}

func __modulus__(lhs POD String, rhs String) String {
    formatted POD String = undef
    percent long = lhs.first('%'ub)
    
    if percent == -1, return lhs
    
    formatted.length = lhs.length + rhs.length - 1
    formatted.capacity = formatted.length
    formatted.ownership = StringOwnership::GIVEN
    
    formatted.array = new ubyte * formatted.length
    
    memcpy(formatted.array, lhs.array, percent)
    memcpy(formatted.array at percent, rhs.array, rhs.length)
    memcpy(formatted.array at (percent + rhs.length), lhs.array at (percent + 1), lhs.length - percent - 1)
    lhs = POD __pass__(lhs)
    lhs.__defer__()
    return formatted
}

func __modulus__(lhs POD String, rhs int) String {
    formatted POD String = undef
    percent long = lhs.first('%'ub)
    
    if percent == -1, return lhs
    
    int_string 12 ubyte = undef
    sprintf(&int_string as *ubyte, '%d', rhs)
    int_string_length usize = strlen(&int_string as *ubyte)
    
    formatted.length = lhs.length + int_string_length - 1
    formatted.capacity = formatted.length
    formatted.ownership = StringOwnership::GIVEN
    
    formatted.array = new ubyte * formatted.length
    
    memcpy(formatted.array, lhs.array, percent)
    memcpy(formatted.array at percent, &int_string as *ubyte, int_string_length)
    memcpy(formatted.array at (percent + int_string_length), lhs.array at (percent + 1), lhs.length - percent - 1)
    lhs = POD __pass__(lhs)
    lhs.__defer__()
    return formatted
}

func __modulus__(lhs POD String, rhs ptr) String {
    return lhs % toString(rhs)
}

func __modulus__(lhs POD String, rhs bool) String {
    return lhs % (rhs ? "true" : "false")
}

func __modulus__(lhs POD String, rhs $T~__primitive__) String {
    // Catch all for lesser used cases
    return lhs % toString(rhs)
}

func commit(this *String) String {
    if this.ownership == StringOwnership::OWN {
        this.ownership = StringOwnership::REFERENCE
        given POD String = undef
        given.array = this.array
        given.length = this.length
        given.capacity = this.capacity
        given.ownership = StringOwnership::GIVEN
        return given
    }
    return *this
}

func donate(this *String) String {
    if this.ownership == StringOwnership::OWN {
        given POD String = undef
        given.array = this.array
        given.length = this.length
        given.capacity = this.capacity
        given.ownership = StringOwnership::GIVEN
        *this = POD "<DONATED>"
        this.ownership = StringOwnership::DONATED
        return given
    }
    return *this
}

func first(this *String, character ubyte) long {
    repeat this.length,
        if this.array[idx] == character,
            return idx as long
    return -1
}

func first(this *String, sub String) long {
    if sub.length > this.length, return -1
    times usize = this.length - sub.length + 1
    repeat times,
        if sub.equals(this.span(idx, sub.length)), return idx as long
    return -1
}

func last(this *String, character ubyte) long {
    repeat this.length,
        if this.array[this.length - idx - 1] == character,
            return (this.length - idx - 1) as long
    return -1
}

func last(this *String, sub String) long {
    if sub.length > this.length, return -1
    times usize = this.length - sub.length + 1
    repeat times,
        if sub.equals(this.span(this.length - idx - 1, sub.length)), return (this.length - idx - 1) as long
    return -1
}

func reverse(this *String) void {
    repeat this.length / 2 {
        preserved ubyte = this.array[idx]
        this.array[idx] = this.array[this.length - idx - 1]
        this.array[this.length - idx - 1] = preserved
    }
}

func reversed(this *String) String {
    reversed POD String = undef
    reversed.array = new ubyte * this.length
    reversed.length = this.length
    reversed.capacity = this.length
    reversed.ownership = StringOwnership::GIVEN
    
    repeat this.length {
        reversed.array[this.length - idx - 1] = this.array[idx]
    }
    
    return reversed
}

func sub(this *String, a, n usize) String {
    span String = this.span(a, n)
    return span.clone()
}

func segment(this *String, a, b usize) String {
    span String = this.range(a, b)
    return span.clone()
}

func span(this *String, a, n usize) StringView {
    substring POD String = undef
    substring.array = this.array at a
    substring.length = n
    substring.capacity = this.capacity - a
    substring.ownership = StringOwnership::REFERENCE
    return substring
}

func range(this *String, a, b usize) StringView {
    substring POD String = undef
    substring.array = this.array at a
    substring.length = b - a
    substring.capacity = this.capacity - a
    substring.ownership = StringOwnership::REFERENCE
    return substring
}

func reduce(this *String, amount usize) {
    this.length = cast bool (amount > this.length) ? 0uz : this.length - amount
}

func reduced(this *String, amount usize) String {
    unless amount < this.length, return ""
    reduced POD String = undef
    reduced.array = new ubyte * (this.length - amount)
    reduced.length = this.length - amount
    reduced.capacity = reduced.length
    reduced.ownership = StringOwnership::GIVEN
    memcpy(reduced.array, this.array, reduced.length)
    return reduced
}

func reducedView(this *String, amount usize) StringView {
    unless amount < this.length, return ""
    reduced POD String = undef
    reduced.array = this.array
    reduced.length = this.length - amount
    reduced.capacity = this.capacity
    reduced.ownership = StringOwnership::REFERENCE
    return reduced
}

func decapitate(this *String, amount usize) {
    if amount >= this.length, *this = ""; return
    
    if this.ownership == StringOwnership::OWN || this.ownership == StringOwnership::GIVEN {
        memmove(this.array, this.array at amount, this.length - amount)
        this.length -= amount
    } else if this.ownership == StringOwnership::REFERENCE {
        *this = this.clone()
        memmove(this.array, this.array at amount, this.length - amount)
        this.length -= amount
    }
}

func decapitated(this *String, amount usize) String {
    unless amount < this.length, return ""
    decapitated POD String = undef
    decapitated.array = new ubyte * (this.length - amount)
    decapitated.length = this.length - amount
    decapitated.capacity = decapitated.length
    decapitated.ownership = StringOwnership::GIVEN
    memcpy(decapitated.array, this.array at amount, decapitated.length)
    return decapitated
}

func decapitatedView(this *String, amount usize) StringView {
    unless amount < this.length, return ""
    decapitated POD String = undef
    decapitated.array = this.array at amount
    decapitated.length = this.length - amount
    decapitated.capacity = this.capacity
    decapitated.ownership = StringOwnership::REFERENCE
    return decapitated
}

func remove(this *String, index usize) {
    this.remove(index, 1)
}

func remove(this *String, a, n usize) {
    unless this.ownership == StringOwnership::OWN || this.ownership == StringOwnership::GIVEN {
        *this = this.clone()
    }

    if a > this.length, return // Don't do anything if index is out of bounds

    if a + n >= this.length {
        // Remove everything after index 'a'
        this.reduce(this.length - a)
        return
    }

    if a == 0 {
        // Remove everything before 'n'
        this.decapitate(n)
        return
    }

    // Join two non-removed sections together
    *this = this.range(0, a) + this.range(a + n, this.length)
}

func removed(this *String, index usize) String {
    return this.removed(index, 1)
}

func removed(this *String, a, n usize) String {
    return this.range(0, a) + this.range(a + n, this.length)
}

func omit(this *String, a, b usize) {
    this.remove(a, b - a)
}

func omitted(this *String, a, b usize) String {
    return this.removed(a, b - a)
}

func append(this *String, other String) {
    unless this.ownership == StringOwnership::OWN || this.ownership == StringOwnership::GIVEN {
        new_length usize = this.length + other.length
        new_array *ubyte = new undef ubyte * new_length
        memcpy(new_array, this.array, this.length)
        memcpy(new_array at this.length, other.array, other.length)
        this.array = new_array
        this.length = new_length
        this.capacity = new_length
        this.ownership = StringOwnership::OWN
        return
    }

    if this.length + other.length > this.capacity {
        this.capacity = this.length + other.length
        new_array *ubyte = new undef ubyte * this.capacity
        memcpy(new_array, this.array, this.length)
        delete this.array
        this.array = new_array
    }
    
    memcpy(this.array at this.length, other.array, other.length)
    this.length += other.length
}

func appendOnce(this *String, other String) {
    unless this.endsWith(other), this.append(other)
}

func clone(this *String) String {
    cloned POD String = undef
    cloned.array = new ubyte * this.capacity
    cloned.length = this.length
    cloned.capacity = this.capacity
    cloned.ownership = StringOwnership::GIVEN
    memcpy(cloned.array, this.array, this.length)
    return cloned
}

func make(this *String) void {
    unless this.ownership == StringOwnership::OWN || this.ownership == StringOwnership::GIVEN {
        *this = this.clone()
    }
}

func reference(this *String) String {
    ref POD String = undef
    ref.array = this.array
    ref.length = this.length
    ref.capacity = this.capacity
    ref.ownership = StringOwnership::REFERENCE
    return ref
}

func replaceOnce(this *String, from ubyte, to String) String {
    pos long = this.first(from)
    if pos < 0, return this.reference()
    return this.range(0, pos) + to + this.range(pos + 1, this.length)
}

func replaceOnce(this *String, from, to String) String {
    pos long = this.first(from)
    if pos < 0, return this.reference()
    return this.range(0, pos) + to + this.range(pos + from.length, this.length)
}

func replace(this *String, from ubyte, to String) String {
    result String = this.reference()
    
    until break {
        pos long = result.first(from)
        if pos < 0, break
        result = result.range(0, pos) + to + result.range(pos + 1, result.length)
    }
    
    return result.commit()
}

func replace(this *String, from, to String) String {
    result String = this.reference()
    
    until break {
        pos long = result.first(from)
        if pos < 0, break
        result = result.range(0, pos) + to + result.range(pos + from.length, result.length)
    }
    
    return result.commit()
}

func equals(this *String, other POD String) bool {
    if this.length != other.length, return false
    repeat static this.length, if this.array[idx] != other.array[idx], return false
    return true
}

func cstr(this *String) *ubyte {
    str *ubyte = new ubyte * (this.length + 1)
    memcpy(str, this.array, this.length)
    str[this.length] = 0x00
    return str
}

func string(null_terminated *ubyte) String {
    created POD String = undef
    created.length = strlen(null_terminated)
    created.array = new ubyte * created.length
    memcpy(created.array, null_terminated, created.length)
    created.capacity = created.length
    created.ownership = StringOwnership::GIVEN
    return created
}

func stringConstant(null_terminated *ubyte) String {
    reference POD String = undef
    reference.length = strlen(null_terminated)
    reference.array = null_terminated
    reference.capacity = reference.length
    reference.ownership = StringOwnership::REFERENCE
    return reference
}

func stringTake(null_terminated *ubyte) String {
    taken POD String = undef
    taken.length = strlen(null_terminated)
    taken.array = null_terminated
    taken.capacity = taken.length + 1
    taken.ownership = StringOwnership::GIVEN
    return taken
}

func stringTake(null_terminated *ubyte, capacity usize) String {
    taken POD String = undef
    taken.length = strlen(null_terminated)
    taken.array = null_terminated
    taken.capacity = capacity
    taken.ownership = StringOwnership::GIVEN
    return taken
}

func __array__(this *String) *ubyte = this.array
func __length__(this *String) usize = this.length

// --------------------------------------------------------

func startsWith(this *String, other String) bool {
    if this.length < other.length, return false
    repeat static other.length, if this.array[idx] != other.array[idx], return false
    return true
}

func endsWith(this *String, other String) bool {
    if this.length < other.length, return false
    repeat static other.length, if this.array[this.length - other.length + idx] != other.array[idx], return false
    return true
}

func longestLength(this *String) usize {
    max, count usize = 0

    each ubyte in *this {
        if it == '\n'ub {
            if count > max, max = count
            count = 0
            continue
        }
        count++
    }
    
    return count > max ? count : max
}

func count(this *String, character ubyte) usize {
    count usize = 0
    each ubyte in static *this, if it == character, count++
    return count
}

func count(this *String, substring String) usize {
    if substring.length > this.length || substring.length == 0, return 0
    count usize = 0
    
    repeat static (this.length - substring.length + 1) {
        if this.span(idx, substring.length) == substring, count++
    }
    
    return count
}

func empty(this *String) bool = this.length == 0

func contains(this *String, needle String) bool = (this.first(needle) != -1sl)
func contains(haystack String, needle String) bool = (haystack.first(needle) != -1sl)

func startsWith(string String, other POD String) bool = string.startsWith(other)
func endsWith(string String, other POD String) bool = string.endsWith(other)
func longestLength(string String) usize = string.longestLength()
func count(string String, character ubyte) usize = string.count(character)
func count(string String, substring String) usize = string.count(substring)
func uppercase(string String) String = string.uppercase()
func lowercase(string String) String = string.lowercase()
func trim(string String) String = string.trimmed()

func uppercase(this *String) String {
    result POD String
    result.array = new ubyte * this.length
    result.length = this.length
    result.capacity = this.capacity
    result.ownership = StringOwnership::GIVEN
    
    each ubyte in static *this {
        result.array[idx] = 'a'ub <= it && it <= 'z'ub ? it - 32ub : it
    }
    
    return result
}

func lowercase(this *String) String {
    result POD String
    result.array = new ubyte * this.length
    result.length = this.length
    result.capacity = this.capacity
    result.ownership = StringOwnership::GIVEN
    
    each ubyte in static *this {
        result.array[idx] = 'A'ub <= it && it <= 'Z'ub ? it + 32ub : it
    }
    
    return result
}

func trim(this *String) void {
    a *ubyte = this.array
    len usize = this.length
    
    start usize = 0
    end usize = len
    
    while start < len && (a[start]   == ' 'ub || a[start]   == '\n'ub || a[start]   == '\t'ub), start++
    while end   > 1   && (a[end - 1] == ' 'ub || a[end - 1] == '\n'ub || a[end - 1] == '\t'ub), end--
    
    // All whitespace
    if start >= end, *this = ""; return
    
    if len != end, this.reduce(len - end)
    if start != 0, this.decapitate(start)
}

func trimmed(this *String) String {
    a *ubyte = this.array
    len usize = this.length
    
    start usize = 0
    end usize = len
    
    while start < len && (a[start]   == ' 'ub || a[start]   == '\n'ub || a[start]   == '\t'ub), start++
    while end   > 1   && (a[end - 1] == ' 'ub || a[end - 1] == '\n'ub || a[end - 1] == '\t'ub), end--
    
    return start >= end ? "" : this.segment(start, end)
}

func trimmedView(this *String) StringView {
    a *ubyte = this.array
    len usize = this.length
    
    start usize = 0
    end usize = len
    
    while start < len && (a[start]   == ' 'ub || a[start]   == '\n'ub || a[start]   == '\t'ub), start++
    while end   > 1   && (a[end - 1] == ' 'ub || a[end - 1] == '\n'ub || a[end - 1] == '\t'ub), end--
    
    return start >= end ? "" : this.range(start, end)
}
