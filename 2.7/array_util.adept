
import Array
import List
import String

func toString(array <$T> Array, separator = ", ", beginning = "[", ending String = "]", separator_after_last bool = false, surrounding String = "") String {
    result String = beginning.toOwned()
    
    each $T in static array {
        result.append(surrounding)
        result.append(toString(it))
        result.append(surrounding)

        if idx + 1 < array.length || separator_after_last {
            result.append(separator)
        }
    }

    result.append(ending)
    return result.commit()
}

func toString(array <String> Array, separator = ", ", beginning = "[", ending String = "]", separator_after_last bool = false) String {
    return toString(array, separator, beginning, ending, separator_after_last, "\"")
}

func toString(array <*ubyte> Array, separator = ", ", beginning = "[", ending String = "]", separator_after_last bool = false) String {
    return toString(array, separator, beginning, ending, separator_after_last, "'")
}

func toString(this *<$T> Array, separator = ", ", beginning = "[", ending String = "]", separator_after_last bool = false, surrounding String = "") String {
    return toString(*this, separator, beginning, ending, separator_after_last, surrounding)
}

func toString(this *<String> Array, separator = ", ", beginning = "[", ending String = "]", separator_after_last bool = false) String {
    return toString(*this, separator, beginning, ending, separator_after_last, "\"")
}

func toString(this *<*ubyte> Array, separator = ", ", beginning = "[", ending String = "]", separator_after_last bool = false) String {
    return toString(*this, separator, beginning, ending, separator_after_last, "\'")
}

func toString(pointer *$T, length usize) String {
    return toString(array(pointer, length))
}

func toString(fixed_array $#N $T) String {
    return toString(&fixed_array as *$T, $#N)
}

func asList(this *<$T> Array) <$T> List {
    return list(this.items, this.length, Ownership::REFERENCE)
}

func map(this *<$T> Array, function func($~T) $S) <$S> List {
    return this.asList().map(function)
}

func map(this *<$T> Array, function func(*$T) $S) <$S> List {
    return this.asList().map(function)
}
