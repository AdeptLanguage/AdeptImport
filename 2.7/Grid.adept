
#default Grid_bounds_checks true

record GridCoord (x, y int)

func GridCoord(index usize, w, _h int) GridCoord {
    #if Grid_bounds_checks
    if index > w * _h {
        printf("ERROR: gridCoord(usize, int, int) got bad index %zu into grid of size (%d, %d)\n", index, w, _h)
        return gridCoord(0, 0)
    }
    #end

    gc POD GridCoord
    gc.x = index % w
    gc.y = index / w
    return gc
}

func __equals__(a, b POD GridCoord) bool {
    return a.x == b.x && a.y == b.y
}

struct <$T> Grid (data *$T, w, h int, ownership Ownership) {
    func __assign__(other POD <$T> Grid) {
        this.__defer__()

        this.data = other.data
        this.w = other.w
        this.h = other.h

        if other.ownership == Ownership::GIVEN {
            this.ownership = Ownership::OWN
        } else {
            this.ownership = Ownership::REFERENCE
        }
    }

    func __defer__ {
        unless this.ownership == Ownership::OWN || this.ownership == Ownership::GIVEN, return
        each $T in [this.data, this.w * this.h], it.?__defer__()
        delete this.data
    }

    func __array__ *$T = this.data
    func __length__ usize = this.w * this.h

    func __access__(coord GridCoord) *$T {
        #if Grid_bounds_checks
        if coord.x < 0 || coord.x >= this.w || coord.y < 0 || coord.y >= this.h {
            printf("ERROR: <$T> Grid of size (%d, %d) got bad access at (%d, %d)\n", this.w, this.h, coord.x, coord.y)
            return this.data
        }
        #end

        return this.data at (coord.y * this.w + coord.x)
    }

    func commit <$T> Grid {
        c POD <$T> Grid = POD *this
        c.ownership = Ownership::GIVEN
        this.ownership = Ownership::REFERENCE
        return c
    }

    func donate <$T> Grid {
        d POD <$T> Grid = POD *this
        d.ownership = Ownership::DONATED
        this.ownership = Ownership::REFERENCE
        return d
    }

    func isValid(coord GridCoord) bool {
        return coord.x >= 0 && coord.y >= 0 && coord.x < this.w && coord.y < this.h
    }

    func flipY {
        tmp *$T = new undef $T * this.w
        defer delete tmp

        repeat this.h / 2 {
            from *$T = this.data at (idx * this.w)
            to *$T = this.data at ((this.h - idx - 1) * this.w)
            memcpy(tmp, to, sizeof $T * this.w)
            memcpy(to, from, sizeof $T * this.w)
            memcpy(from, tmp, sizeof $T * this.w)
        }
    }
}

func __pass__(grid POD <$T> Grid) <$T> Grid {
    if grid.ownership == Ownership::OWN {
        grid.ownership = Ownership::REFERENCE
    } else if grid.ownership == Ownership::GIVEN {
        grid.ownership = Ownership::OWN
    }

    return grid
}

func Grid(w, h int, square $T) <$T> Grid {
    g POD <$T> Grid
    g.data = new $T * (w * h)
    g.w = w
    g.h = h
    g.ownership = Ownership::OWN
    each $T in g, it = square
    return g
}

// Backwards-compatibility
func alias gridCoord(int, int) => GridCoord
func alias gridCoord(usize, int, int) => GridCoord
func grid(w, h int, square POD $T) <$T> Grid = Grid(w, h, square)
