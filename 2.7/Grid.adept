
#default Grid_bounds_checks true
#default Grid_error_on_donor_usage true

#if Grid_error_on_donor_usage
    func assertNotDonor(this *<$T> Grid, function_name *ubyte, is_method bool) {
        if this.ownership == Ownership::DONOR {
            error_message *ubyte = is_method ? 'RUNTIME ERROR: Grid.adept: Cannot use Grid.%s method on <%s> Grid that was previously donated\n'
                                             : 'RUNTIME ERROR: Grid.adept: Cannot use %s function with <%s> Grid that was previously donated\n'
            fprintf(stderr, error_message, function_name, typenameof $T)
            abort()
        }
    }
#end

import 'sys/cstdio.adept'
import 'sys/cstdlib.adept'
import Ownership

record GridCoord (x, y int)

func GridCoord(index usize, w, _h int) GridCoord {
    #if Grid_bounds_checks
        if index > w * _h {
            fprintf(stderr, 'RUNTIME ERROR: Grid.adept: gridCoord(usize, int, int) got bad index %zu into grid of size (%d, %d)\n', index, w, _h)
            abort()
        }
    #end

    gc POD GridCoord
    gc.x = index % w
    gc.y = index / w
    return gc
}

func __equals__(a, b POD GridCoord) bool {
    return a.x == b.x && a.y == b.y
}

record <$T> Grid (data *$T, w, h int, ownership Ownership) {
    func __defer__ {
        if this.ownership == Ownership::OWN || this.ownership == Ownership::GIVEN {
            each $T in static [this.data, this.w * this.h], it.?__defer__()
            delete this.data
        }
    }

    func __assign__(other POD <$T> Grid) {
        this.__defer__()

        exhaustive switch other.ownership {
        case Ownership::OWN
            this.ownership = Ownership::REFERENCE
        case Ownership::REFERENCE
            this.ownership = Ownership::REFERENCE
        case Ownership::GIVEN
            this.ownership = Ownership::OWN
        case Ownership::DONOR
            #if Grid_error_on_donor_usage
                this.assertNotDonor('__assign__', true)
            #end
            abort()
        }

        this.data = other.data
        this.w = other.w
        this.h = other.h
    }

    func __array__ *$T {
        #if Grid_error_on_donor_usage
            this.assertNotDonor('__array__', true)
        #end

        return this.data
    }

    func __length__ usize {
        #if Grid_error_on_donor_usage
            this.assertNotDonor('__length__', true)
        #end

        return this.w * this.h
    }

    func __access__(coord GridCoord) *$T {
        #if Grid_error_on_donor_usage
            this.assertNotDonor('__access__', true)
        #end

        #if Grid_bounds_checks
            if coord.x < 0 || coord.x >= this.w || coord.y < 0 || coord.y >= this.h {
                fprintf(stderr, 'RUNTIME ERROR: Grid.adept: <%s> Grid of size (%d, %d) got bad access at (%d, %d)\n', typenameof $T, this.w, this.h, coord.x, coord.y)
                abort()
            }
        #end

        return this.data at (coord.y * this.w + coord.x)
    }

    func commit <$T> Grid {
        if this.ownership != Ownership::OWN {
            #if Grid_error_on_donor_usage
                this.assertNotDonor('commit', true)
            #end
            
            return *this
        }

        this.ownership = Ownership::REFERENCE
        return Grid(this.data, this.w, this.h, Ownership::GIVEN)
    }

    func donate <$T> Grid {
        if this.ownership != Ownership::OWN {
            #if Grid_error_on_donor_usage
                this.assertNotDonor('donate', true)
            #end

            fprintf(stderr, 'RUNTIME ERROR: Grid.adept: Cannot donate() <%s> Grid that doesn\'t have ownership\n', typenameof $T)
            abort()

            // (unreachable)
        }

        this.ownership = Ownership::DONOR
        return Grid(this.data, this.w, this.h, Ownership::GIVEN)
    }
    
    func give <$T> Grid {
        if this.ownership != Ownership::OWN {
            #if Grid_error_on_donor_usage
                this.assertNotDonor('give', true)
            #end

            fprintf(stderr, 'RUNTIME ERROR: Grid.adept: Cannot give() <%s> Grid that doesn\'t have ownership\n', typenameof $T)
            abort()

            // (unreachable)
        }

        this.ownership = Ownership::REFERENCE
        return Grid(this.data, this.w, this.h, Ownership::GIVEN)
    }

    func isValid(coord GridCoord) bool {
        #if Grid_error_on_donor_usage
            this.assertNotDonor('isValid', true)
        #end

        return coord.x >= 0 && coord.y >= 0 && coord.x < this.w && coord.y < this.h
    }

    func flipY {
        #if Grid_error_on_donor_usage
            this.assertNotDonor('flipY', true)
        #end

        tmp *$T = new undef $T * this.w
        defer delete tmp

        repeat this.h / 2 {
            from *$T = this.data at (idx * this.w)
            to *$T = this.data at ((this.h - idx - 1) * this.w)
            memcpy(tmp, to, sizeof $T * this.w)
            memcpy(to, from, sizeof $T * this.w)
            memcpy(from, tmp, sizeof $T * this.w)
        }
    }
}

func __pass__(grid POD <$T> Grid) <$T> Grid {
    #if Grid_error_on_donor_usage
        this.assertNotDonor('__pass__', false)
    #end

    if grid.ownership == Ownership::OWN {
        grid.ownership = Ownership::REFERENCE
    } else if grid.ownership == Ownership::GIVEN {
        grid.ownership = Ownership::OWN
    }

    return grid
}

func Grid(w, h int, square $T) <$T> Grid {
    grid POD <$T> Grid = POD Grid(new $T * (w * h), w, h, Ownership::GIVEN)
    each $T in static grid, it = square
    return grid
}
