
#default vsprintf_type_checks __typeinfo__

import math
import List
import String
import VariadicArray

func toBool(this *String) bool {
    return this.length == 1 ? this.array[0] == '1'ub : *this == "true"
}

func toBool(this *String, out result *bool) successful {
    if this.length == 1 {
        if this.array[0] == '1'ub, *result = true;  return true
        if this.array[0] == '0'ub, *result = false; return true
        return false
    }
    
    if *this == "true",  *result = true;  return true
    if *this == "false", *result = false; return true
    return false
}

func toUbyte(this *String)  ubyte  = this.toUlong() as ubyte
func toUshort(this *String) ushort = this.toUlong() as ushort
func toUint(this *String)   uint   = this.toUlong() as uint

func toUlong(this *String) ulong {
    // Check string length
    if this.length == 0 || this.length > 20, return 0
    
    power ulong = 1
    s *ubyte = this.array
    i usize = this.length - 1
    result ulong = 0
    
    until break {
        c ubyte = s[i]
        if c < '0'ub || c > '9'ub, return 0
        result += cast ulong (c - '0'ub) * power
        power *= 10
        if i == 0, break
        i -= 1
    }
    
    return result
}

func toByte(this *String)  byte  = this.toLong() as byte
func toShort(this *String) short = this.toLong() as short
func toInt(this *String)   int   = this.toLong() as int

func toLong(this *String) long {
    // Check string length
    if this.length == 0 || this.length > 20, return 0
    
    power long = 1
    s *ubyte = this.array
    i usize = this.length - 1
    result long = 0
    sign bool = s[0] == '-'ub
    
    until break {
        c ubyte = s[i]
        if c < '0'ub || c > '9'ub, return 0
        result += cast long (c - '0'ub) * power
        power *= 10
        if i == sign as usize, break
        i -= 1
    }
    
    return sign ? 0sl - result : result
}

func toFloat(this *String) float {
    // TODO: Do a real implementation
    return this.toDouble() as float
}

func toDouble(this *String) double {
    // Based on atof implementation by University of California
    
    /* 
    * atof.c --
    *
    *    Source code for the "atof" library procedure.
    *
    * Copyright 1988 Regents of the University of California
    * Permission to use, copy, modify, and distribute this
    * software and its documentation for any purpose and without
    * fee is hereby granted, provided that the above copyright
    * notice appear in all copies.  The University of California
    * makes no representations about the suitability of this
    * software for any purpose.  It is provided "as is" without
    * express or implied warranty.
    */
    
    max_exponent int = 511
    powers_of_10 *double = static double {
        10.0,
        100.0,
        1.0e4,
        1.0e8,
        1.0e16,
        1.0e32,
        1.0e64,
        1.0e128,
        1.0e256
    }
    
    sign int = 0
    exp_sign int = 0
    
    fraction double = undef
    dbl_exp double = undef
    d *double = undef
    
    p *ubyte = undef
    c ubyte = undef
    exp int = 0
    frac_exp int = 0
    mant_size int = 0
    dec_pt int = 0
    pExp *ubyte = undef
    
    p = this.array
    endP *ubyte = this.array + this.length as ptr
    
    // String is blank
    if p == endP, return 0.0
    
    // Strip off leading blanks
    while *p == ' 'ub {
        p += sizeof ubyte as ptr
        
        // String is only spaces
        if p == endP, return 0.0
    }
    
    // Check for sign
    if *p == '-'ub {
        sign = 1
        p += sizeof ubyte as ptr
        
        // String is only negative sign
        if p == endP, return 0.0
    } else {
        sign = 0
        
        if *p == '+'ub {
            p += sizeof ubyte as ptr
            
            // String is only positive sign
            if p == endP, return 0.0
        }
    }
    
    // Count mantissa length (including dot) and locate decimal point
    dec_pt = -1
    until break {
        c = p == endP ? 0x00ub : *p
        
        if c < '0'ub || c > '9'ub {
            if c != '.'ub || dec_pt >= 0, break
            dec_pt = mant_size
        }
        
        p += sizeof ubyte as ptr
        mant_size += 1
    }
    
    // Collect digits in mantissa
    pExp = p
    p -= cast ptr (sizeof ubyte * mant_size)
    if dec_pt < 0 {
        dec_pt = mant_size
    } else {
        mant_size--
    }
    if mant_size > 18 {
        frac_exp = dec_pt - 18
        mant_size = 18
    } else {
        frac_exp = dec_pt - mant_size
    }
    if mant_size == 0 {
        return 0.0
    } else {
        frac1, frac2 int = 0
        while mant_size > 9 {
            c = *p // (p should be valid)
            p += sizeof ubyte as ptr
            if c == '.'ub {
                c = *p // (p should be valid)
                p += sizeof ubyte as ptr
            }
            frac1 = 10 * frac1 + (c - '0'ub)
            mant_size--
        }
        while mant_size > 0 {
            c = *p // (p should be valid)
            p += sizeof ubyte as ptr
            if c == '.'ub {
                c = *p // (p should be valid)
                p += sizeof ubyte as ptr
            }
            frac2 = 10 * frac2 + (c - '0'ub)
            mant_size--
        }
        fraction = 1.0e9 * frac1 as double + frac2 as double;
    }
    
    // Skim off exponent
    p = pExp
    if p != endP && (*p == 'e'ub || *p == 'E'ub) {
        p += sizeof ubyte as ptr
        if p != endP && *p == '-'ub {
            exp_sign = 1
            p += sizeof ubyte as ptr
        } else {
            exp_sign = 0
            
            if p != endP && *p == '+'ub {
                p += sizeof ubyte as ptr
            }
        }
        while p != endP && *p >= '0'ub && *p <= '9'ub {
            exp = exp * 10 + (*p - '0'ub)
            p += sizeof ubyte as ptr
        }
    }
    exp = exp_sign ? frac_exp - exp : frac_exp + exp
    
    // Generate double
    if exp < 0 {
        exp_sign = 1
        exp = 0 - exp
    } else {
        exp_sign = 0
    }
    if exp > max_exponent {
        exp = max_exponent
    }
    dbl_exp = 1.0
    d = powers_of_10
    until exp == 0 {
        if exp & 1 {
            dbl_exp *= *d
        }
        exp >>= 1
        d += sizeof double as ptr
    }
    if exp_sign {
        fraction /= dbl_exp
    } else {
        fraction *= dbl_exp
    }
    return sign ? 0.0 - fraction : fraction
}

func toUsize(this *String) usize = this.toUlong()

func toBool(string String) bool = string.toBool()
func toByte(string String) byte = string.toByte()
func toUbyte(string String) ubyte = string.toUbyte()
func toShort(string String) short = string.toShort()
func toUshort(string String) ushort = string.toUshort()
func toInt(string String) int = string.toInt()
func toUint(string String) uint = string.toUint()
func toLong(string String) long = string.toLong()
func toUlong(string String) ulong = string.toUlong()
func toUsize(string String) usize = string.toUlong()
func toFloat(string String) float = string.toFloat()
func toDouble(string String) double = string.toDouble()

func toString(value ptr)   String  = toHexString(value as ulong, 16)
func toString(value bool)  String  = value ? "true" : "false"
func toString(value byte)  String  = toString(value as long)
func toString(value short) String  = toString(value as long)
func toString(value int)   String  = toString(value as long)

func toString(value long) String {
    if value == 0, return "0"
    
    a *ubyte = new ubyte * 20
    len usize = 0
    negative bool = value < 0
    
    // Make value positive if negative
    if negative, value = 0 - value
    
    // Layout digits smallest ^10 to largest ^10
    until value == 0 || len == 19 {
        a[len++] = '0123456789'[value % 10]
        value /= 10
    }
    
    // Append minus sign if negative
    if negative, a[len++] = '-'ub
    
    // Build string and reverse it
    result POD String = undef
    result.array = a
    result.length = len
    result.capacity = 20
    result.ownership = StringOwnership::GIVEN
    result.reverse()
    return result
}

func toHexString(value byte)  String = toHexString(value as long, 2)
func toHexString(value short) String = toHexString(value as long, 4)
func toHexString(value int)   String = toHexString(value as long, 8)
func toHexString(value long)  String = toHexString(value, 16)

func toHexString(value long, min_digits usize) String {
    a *ubyte = new ubyte * 20
    len usize = 0
    negative bool = value < 0
    
    // Handle zero
    if value == 0 {
        if min_digits < 2, min_digits = 2
        
        a[len++] = '0'ub
        a[len++] = 'x'ub
        
        while min_digits != 0 {
            a[len++] = '0'ub
            min_digits--
        }
        
        result POD String = undef
        result.array = a
        result.length = len
        result.capacity = 20
        result.ownership = StringOwnership::GIVEN
        return result
    }
    
    // Make value positive if negative
    if negative, value = 0 - value
    
    // Layout digits smallest ^16 to largest ^16
    until value == 0 || len == 17 {
        a[len++] = '0123456789ABCDEF'[value % 16]
        value /= 16
    }
    
    // Pad with zeros
    while len < min_digits, a[len++] = '0'ub
    
    // Append '0x'
    a[len++] = 'x'ub
    a[len++] = '0'ub
    
    // Append minus sign if negative
    if negative, a[len++] = '-'ub
    
    // Build string and reverse it
    result POD String = undef
    result.array = a
    result.length = len
    result.capacity = 20
    result.ownership = StringOwnership::GIVEN
    result.reverse()
    return result
}

func toString(value ubyte)  String = toString(value as ulong)
func toString(value ushort) String = toString(value as ulong)
func toString(value uint)   String = toString(value as ulong)

func toString(value ulong) String {
    if value == 0, return "0"
    
    a *ubyte = new ubyte * 20
    len usize = 0
    
    // Layout digits smallest ^10 to largest ^10
    until value == 0 || len == 20 {
        a[len++] = '0123456789'[value % 10]
        value /= 10
    }
    
    // Build string and reverse it
    result POD String = undef
    result.array = a
    result.length = len
    result.capacity = 20
    result.ownership = StringOwnership::GIVEN
    result.reverse()
    return result
}

func toHexString(value ptr)    String = toHexString(value as ulong, 16)
func toHexString(value ubyte)  String = toHexString(value as ulong, 2)
func toHexString(value ushort) String = toHexString(value as ulong, 4)
func toHexString(value uint)   String = toHexString(value as ulong, 8)
func toHexString(value ulong)  String = toHexString(value, 16)

func toHexString(value ulong, min_digits usize) String {
    a *ubyte = new ubyte * 18
    len usize = 0
    
    // Handle zero
    if value == 0 {
        if min_digits < 2, min_digits = 2
        
        a[len++] = '0'ub
        a[len++] = 'x'ub
        
        while min_digits != 0 {
            a[len++] = '0'ub
            min_digits--
        }
        
        result POD String = undef
        result.array = a
        result.length = len
        result.capacity = 20
        result.ownership = StringOwnership::GIVEN
        return result
    }
    
    // Layout digits smallest ^16 to largest ^16
    until value == 0 || len == 16 {
        a[len++] = '0123456789ABCDEF'[value % 16]
        value /= 16
    }
    
    // Pad with zeros
    while len < min_digits, a[len++] = '0'ub
    
    // Append '0x'
    a[len++] = 'x'ub
    a[len++] = '0'ub
    
    // Build string and reverse it
    result POD String = undef
    result.array = a
    result.length = len
    result.capacity = 18
    result.ownership = StringOwnership::GIVEN
    result.reverse()
    return result
}

func toString(value float) String {
    // TODO: Do a real implementation
    return toString(value as double)
}

func toString(value double) String {
    // TODO: Do a real implementation
    result POD String = undef
    result.array = new ubyte * 324
    result.capacity = 324
    sprintf(result.array, '%f', value)
    result.length = strlen(result.array)
    result.ownership = StringOwnership::GIVEN
    return result
}

func sprintf(out result *String, format String, arguments ...) int {
    return vsprintf(result, format, arguments)
}

func sprintf(format String, arguments ...) String {
    result String
    return vsprintf(&result, format, arguments) >= 0 ? result.commit() : ""
}

func vsprintf(out result *String, format String, arguments VariadicArray) int {
    p *ubyte = format.array
    end *ubyte = format.array at format.length
    written int = 0
    
    until p == end {
        unless *p == '%'ub {
            result.append(*p)
            p += sizeof ubyte as ptr
            continue
        }
        
        p += sizeof ubyte as ptr
        if p == end, break
        
        #if variadic_array_use_typeinfo
        next_type *AnyType = arguments.getNextType()
        #end
        
        switch *p {
        case '%'ub, result.append("%")
        case 'S'ub
            #if vsprintf_type_checks
            if next_type != typeinfo String,
                printf('WARNING: vsprintf(*String, String, VariadicArray) expected String value for %%S, got \'%s\' instead\n', next_type.name)
            #end
            
            result.append(arguments.readString())
        case 'd'ub
            value int = 0
            #if variadic_array_use_typeinfo
                if      next_type == typeinfo int, value = arguments.readInt()
                else if next_type == typeinfo uint, value = arguments.readUint()
                else if next_type == typeinfo long, value = arguments.readLong()
                else if next_type == typeinfo ulong, value = arguments.readUlong()
                else if next_type == typeinfo usize, value = arguments.readUlong() // usize == ulong
                else if next_type == typeinfo short, value = arguments.readShort()
                else if next_type == typeinfo ushort, value = arguments.readUshort()
                else if next_type == typeinfo byte, value = arguments.readByte()
                else if next_type == typeinfo ubyte, value = arguments.readUbyte()
                else if next_type == typeinfo bool, value = arguments.readBool()
                else if next_type == typeinfo successful, value = arguments.readBool() // successful == bool
                else {
                    #if vsprintf_type_checks
                        printf('WARNING: vsprintf(*String, String, VariadicArray) got unknown type for %d\n')
                    #end
                    value = arguments.readInt()
                }
                result.append(value)
            #else
                result.append(arguments.readInt())
            #end
        case 's'ub,
            #if vsprintf_type_checks
            if next_type != typeinfo *ubyte,
                printf('WARNING: vsprintf(*String, String, VariadicArray) expected *ubyte value for %%s, got \'%s\' instead\n', next_type.name)
            #end
            
            result.append(arguments.readCString())
        case 'p'ub
            #if vsprintf_type_checks
            if next_type.kind != AnyTypeKind::PTR,
                printf('WARNING: vsprintf(*String, String, VariadicArray) expected pointer value for %%p, got \'%s\' instead\n', next_type.name)
            #end
            
            result.append(arguments.readPtr())
        }
        
        p += sizeof ubyte as ptr
    }
    
    return written
}
