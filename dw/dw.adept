/* Dynamic Windows version numbers */
define DW_MAJOR_VERSION = 3
define DW_MINOR_VERSION = 3
define DW_SUB_VERSION = 0

/* General application type defines */
define DW_HOME_URL = 'http://dwindows.netlabs.org'

/* These corespond to the entries in the color
 * arrays in the Win32 dw.c, they are also the
 * same as DOS ANSI colors.
 */
define DW_CLR_BLACK = 0
define DW_CLR_DARKRED = 1
define DW_CLR_DARKGREEN = 2
define DW_CLR_BROWN = 3
define DW_CLR_DARKBLUE = 4
define DW_CLR_DARKPINK = 5
define DW_CLR_DARKCYAN = 6
define DW_CLR_PALEGRAY = 7
define DW_CLR_DARKGRAY = 8
define DW_CLR_RED = 9
define DW_CLR_GREEN = 10
define DW_CLR_YELLOW = 11
define DW_CLR_BLUE = 12
define DW_CLR_PINK = 13
define DW_CLR_CYAN = 14
define DW_CLR_WHITE = 15
define DW_CLR_DEFAULT = 16

/* Signal handler defines */
define DW_SIGNAL_CONFIGURE = 'configure_event'
define DW_SIGNAL_KEY_PRESS = 'key_press_event'
define DW_SIGNAL_BUTTON_PRESS = 'button_press_event'
define DW_SIGNAL_BUTTON_RELEASE = 'button_release_event'
define DW_SIGNAL_MOTION_NOTIFY = 'motion_notify_event'
define DW_SIGNAL_DELETE = 'delete_event'
define DW_SIGNAL_EXPOSE = 'expose_event'
define DW_SIGNAL_CLICKED = 'clicked'
define DW_SIGNAL_ITEM_ENTER = 'container-select'
define DW_SIGNAL_ITEM_CONTEXT = 'container-context'
define DW_SIGNAL_ITEM_SELECT = 'tree-select'
define DW_SIGNAL_LIST_SELECT = 'item-select'
define DW_SIGNAL_SET_FOCUS = 'set-focus'
define DW_SIGNAL_VALUE_CHANGED = 'value_changed'
define DW_SIGNAL_SWITCH_PAGE = 'switch-page'
define DW_SIGNAL_COLUMN_CLICK = 'click-column'
define DW_SIGNAL_TREE_EXPAND = 'tree-expand'
define DW_SIGNAL_HTML_CHANGED = 'html-changed'
define DW_SIGNAL_HTML_RESULT = 'html-result'

/* status of menu items */
define DW_MIS_ENABLED = 1
define DW_MIS_DISABLED = (1 << 1)
define DW_MIS_CHECKED = (1 << 2)
define DW_MIS_UNCHECKED = (1 << 3)

/* Gravity */
define DW_GRAV_TOP = 0
define DW_GRAV_LEFT = 0
define DW_GRAV_CENTER = 1
define DW_GRAV_RIGHT = 2
define DW_GRAV_BOTTOM = 2
define DW_GRAV_OBSTACLES = (1 << 10)

/* Control size constants */
define DW_SIZE_AUTO = -1

struct CDATE (
    day ubyte,
    month ubyte,
    year ushort
)

alias PCDATE = *CDATE

struct CTIME (
    hours ubyte,
    minutes ubyte,
    seconds ubyte,
    ucReserved ubyte
)

alias PCTIME = *CTIME

alias HTIMER = int

/* Some dark mode constants for supported platforms */
define DW_DARK_MODE_DISABLED = 0
define DW_DARK_MODE_BASIC = 1
define DW_DARK_MODE_FULL = 2
define DW_DARK_MODE_FORCED = 3

/* Mobile alternate container modes */
define DW_CONTAINER_MODE_DEFAULT = 0  /* Displays only the main column on mobile platforms */
define DW_CONTAINER_MODE_EXTRA = 1    /* Displays the main column, and the rest on a second line */
define DW_CONTAINER_MODE_MULTI = 2    /* Displays every display column on a separate line plus buttons */
define DW_CONTAINER_MODE_MAX = 3

define _DW_ENV_STRING_SIZE = 257

struct DWEnv (
    osName [_DW_ENV_STRING_SIZE] ubyte,
    buildDate [_DW_ENV_STRING_SIZE] ubyte,
    buildTime [_DW_ENV_STRING_SIZE] ubyte,
    MajorVersion short,
    MinorVersion short,
    MajorBuild short,
    MinorBuild short,
    DWMajorVersion short,
    DWMinorVersion short,
    DWSubVersion short,
    htmlEngine [_DW_ENV_STRING_SIZE] ubyte
)

struct DWExpose (
    x int,
    y int,
    width int,
    height int
)

#if __windows__
import 'dw_win32.adept'
#elif __linux__
import 'dw_gtk.adept'
#else
import 'dw_mac.adept'
#end

#if __linux__
#if GTK4_OR_LATER
struct DWDialog (
    eve HEV,
    done int,
    method int,
    data ptr,
    result ptr,
    mainloop *GMainLoop
)
#else
struct DWDialog (
    eve HEV,
    done int,
    method int,
    data ptr,
    result ptr
)
#end
#end

#if !__linux__
struct DWDialog (
    eve HEV,
    done int,
    method int,
    data ptr,
    result ptr
)
#end

alias HPRINT = ptr

func DW_SIGNAL_FUNC(a $T) ptr = (a as ptr)

define DW_DESKTOP = HWND_DESKTOP
define DW_MINIMIZED = 1

define DW_BUTTON1_MASK = 1
define DW_BUTTON2_MASK = (1 << 1)
define DW_BUTTON3_MASK = (1 << 2)

define DW_EXEC_CON = 0
define DW_EXEC_GUI = 1

define DW_FILE_OPEN = 0
define DW_FILE_SAVE = 1
define DW_DIRECTORY_OPEN = 2

define DW_FILE_PATH = 0

define DW_FILE_MASK = (0x0000FFFF)

define DW_HORZ = 0
define DW_VERT = 1

define DW_TIMEOUT_INFINITE = (-1 as ulong)

/* Obsolete, should disappear sometime */
define BOXHORZ = DW_HORZ
define BOXVERT = DW_VERT
define DW_FCF_SHELLPOSITION = 0
define DW_FCF_NOBYTEALIGN = 0
define DW_FCF_VERTSCROLL = 0
define DW_FCF_HORZSCROLL = 0

/* Scrolling constants */
define DW_SCROLL_UP = 0
define DW_SCROLL_DOWN = 1
define DW_SCROLL_TOP = 2
define DW_SCROLL_BOTTOM = 3

/* return values for dw_messagebox() */
define DW_MB_RETURN_OK = 0
define DW_MB_RETURN_YES = 1
define DW_MB_RETURN_NO = 0
define DW_MB_RETURN_CANCEL = 2

func DW_PIXMAP_WIDTH(x HPIXMAP) ulong = x ? x.width : 0ul
func DW_PIXMAP_HEIGHT(x HPIXMAP) ulong = x ? x.height : 0ul

define DW_RGB_COLOR = (0xF0000000)
define DW_RGB_TRANSPARENT = (0x0F000000)
define DW_RGB_MASK = (0x00FFFFFF)
define DW_RED_MASK = (0x000000FF)
define DW_GREEN_MASK = (0x0000FF00)
define DW_BLUE_MASK = (0x00FF0000)
func DW_RED_VALUE(a $T) $T = (a & DW_RED_MASK)
func DW_GREEN_VALUE(a $T) $T = ((a & DW_GREEN_MASK) >> 8)
func DW_BLUE_VALUE(a $T) $T = ((a & DW_BLUE_MASK) >> 16)
func DW_RGB(a, b, c $T) $T = 0xF0000000 | a | (b << 8) | (c << 16)

/* Menu convenience paramaters */
define DW_MENU_SEPARATOR = ""
define DW_NOMENU = 0
define DW_MENU_AUTO = 0
define DW_MENU_POPUP = (-1 as ulong)

/* Convenience parameters for various types */
define DW_NOHWND = 0
define DW_NOHTIMER = 0
define DW_NOHPRINT = 0
define DW_NOHPIXMAP = 0
define DW_NOHICN = 0

define DW_PERCENT_INDETERMINATE = (-1 as uint)

/* Return value error codes */
define DW_ERROR_NONE = 0
define DW_ERROR_GENERAL = 1
define DW_ERROR_TIMEOUT = 2
define DW_ERROR_NON_INIT = 3
define DW_ERROR_NO_MEM = 4
define DW_ERROR_INTERRUPT = 5
define DW_ERROR_UNKNOWN = -1

/* Embedded HTML actions */
define DW_HTML_GOBACK = 0
define DW_HTML_GOFORWARD = 1
define DW_HTML_GOHOME = 2
define DW_HTML_SEARCH = 3
define DW_HTML_RELOAD = 4
define DW_HTML_STOP = 5
define DW_HTML_PRINT = 6

/* Embedded HTML notifcations */
define DW_HTML_CHANGE_STARTED = 1
define DW_HTML_CHANGE_REDIRECT = 2
define DW_HTML_CHANGE_LOADING = 3
define DW_HTML_CHANGE_COMPLETE = 4

/* Drawing flags  */
define DW_DRAW_DEFAULT = 0
define DW_DRAW_FILL = 1
define DW_DRAW_FULL = (1 << 1)
define DW_DRAW_NOAA = (1 << 2)

/* MLE Completion flags */
define DW_MLE_COMPLETE_TEXT = 1
define DW_MLE_COMPLETE_DASH = (1 << 1)
define DW_MLE_COMPLETE_QUOTE = (1 << 2)

/* Library feature constants */
define DW_FEATURE_UNSUPPORTED = -1
define DW_FEATURE_DISABLED = 0
define DW_FEATURE_ENABLED = 1

foreign enum DWFEATURE (
    DW_FEATURE_HTML,                    /* Supports the HTML Widget */
    DW_FEATURE_HTML_RESULT,             /* Supports the DW_SIGNAL_HTML_RESULT callback */
    DW_FEATURE_WINDOW_BORDER,           /* Supports custom window border sizes */
    DW_FEATURE_WINDOW_TRANSPARENCY,     /* Supports window frame transparency */
    DW_FEATURE_DARK_MODE,               /* Supports Dark Mode user interface */
    DW_FEATURE_MLE_AUTO_COMPLETE,       /* Supports auto completion in Multi-line Edit boxes */
    DW_FEATURE_MLE_WORD_WRAP,           /* Supports word wrapping in Multi-line Edit boxes */
    DW_FEATURE_CONTAINER_STRIPE,        /* Supports striped line display in container widgets */
    DW_FEATURE_MDI,                     /* Supports Multiple Document Interface window frame */
    DW_FEATURE_NOTEBOOK_STATUS_TEXT,    /* Supports status text area on notebook/tabbed controls */
    DW_FEATURE_NOTIFICATION,            /* Supports sending system notifications */
    DW_FEATURE_UTF8_UNICODE,            /* Supports UTF8 encoded Unicode text */
    DW_FEATURE_MLE_RICH_EDIT,           /* Supports Rich Edit based MLE control (Windows) */
    DW_FEATURE_TASK_BAR,                /* Supports icons in the taskbar or similar system widget */
    DW_FEATURE_TREE,                    /* Supports the Tree Widget */
    DW_FEATURE_WINDOW_PLACEMENT,        /* Supports arbitrary window placement */
    DW_FEATURE_CONTAINER_MODE,          /* Supports alternate container view modes */
    DW_FEATURE_MAX
)

/* Macro for casting resource IDs to HICN */
func DW_RESOURCE(a $T) HICN = (a < 65536 ? a as HICN : 0 as HICN)

func DW_INT_TO_POINTER(a int) ptr = a as ptr
func DW_POINTER_TO_INT(a ptr) int = a as int

func DW_UINT_TO_POINTER(a uint) ptr = a as ptr
func DW_POINTER_TO_UINT(a ptr) uint = a as uint

func DW_LONGLONG_TO_POINTER(a long) ptr = a as ptr
func DW_POINTER_TO_LONGLONG(a ptr) long = a as long

func DW_ULONGLONG_TO_POINTER(a ulong) ptr = a as ptr
func DW_POINTER_TO_ULONGLONG(a ptr) ulong = a as ulong

func DW_POINTER(a $T) ptr = a as ptr

#if !__windows__
define DW_FCF_COMPOSITED = 0
define DW_DIR_SEPARATOR = '/'ub
#end

/* Constants for sizing scrolled widgets */
define _DW_SCROLLED_MIN_WIDTH = 100
define _DW_SCROLLED_MIN_HEIGHT = 75
define _DW_SCROLLED_MAX_WIDTH = 500
define _DW_SCROLLED_MAX_HEIGHT = 400

/* Use the dbsoft.org application domain by default if not specified */
define DW_APP_DOMAIN_DEFAULT = 'org.dbsoft.dwindows'

/* Forwarder macros to the future names of these functions */
func alias dw_pointer_get_pos(*long, *long) => dw_pointer_query_pos
func alias dw_environment_get(*DWEnv) => dw_environment_query
func alias dw_container_get_start(HWND, ulong) => dw_container_query_start
func alias dw_container_get_next(HWND, ulong) => dw_container_query_next

/* Public function prototypes */
foreign dw_box_pack_start(box HWND, item HWND, width int, height int, hsize int, vsize int, pad int) void
foreign dw_box_pack_end(box HWND, item HWND, width int, height int, hsize int, vsize int, pad int) void
foreign dw_box_pack_at_index(box HWND, item HWND, index int, width int, height int, hsize int, vsize int, pad int) void
foreign dw_box_unpack_at_index(box HWND, index int) HWND
foreign dw_box_unpack(handle HWND) int
foreign dw_init(newthread int, argc int, argv **ubyte) int
foreign dw_main() void
foreign dw_main_quit() void
foreign dw_main_sleep(seconds int) void
foreign dw_main_iteration() void
foreign dw_free(ptr) void
foreign dw_window_show(handle HWND) int
foreign dw_window_hide(handle HWND) int
foreign dw_window_minimize(handle HWND) int
foreign dw_window_raise(handle HWND) int
foreign dw_window_lower(handle HWND) int
foreign dw_window_destroy(handle HWND) int
foreign dw_window_redraw(handle HWND) void
foreign dw_window_set_font(handle HWND, fontname *ubyte) int
foreign dw_window_get_font(handle HWND) *ubyte
foreign dw_window_set_color(handle HWND, fore ulong, back ulong) int
foreign dw_window_new(hwndOwner HWND, title *ubyte, flStyle ulong) HWND
foreign dw_box_new(type int, pad int) HWND
foreign dw_scrollbox_new(type int, pad int) HWND
foreign dw_scrollbox_get_pos(handle HWND, orient int) int
foreign dw_scrollbox_get_range(handle HWND, orient int) int
foreign dw_groupbox_new(type int, pad int, title *ubyte) HWND
foreign dw_mdi_new(id ulong) HWND // deprecated
foreign dw_bitmap_new(id ulong) HWND
foreign dw_bitmapbutton_new(text *ubyte, id ulong) HWND
foreign dw_bitmapbutton_new_from_file(text *ubyte, id ulong, filename *ubyte) HWND
foreign dw_bitmapbutton_new_from_data(text *ubyte, id ulong, str *ubyte, len int) HWND
foreign dw_container_new(id ulong, multi int) HWND
foreign dw_tree_new(id ulong) HWND
foreign dw_text_new(text *ubyte, id ulong) HWND
foreign dw_status_text_new(text *ubyte, id ulong) HWND
foreign dw_mle_new(id ulong) HWND
foreign dw_entryfield_new(text *ubyte, id ulong) HWND
foreign dw_entryfield_password_new(text *ubyte, id ulong) HWND
foreign dw_combobox_new(text *ubyte, id ulong) HWND
foreign dw_button_new(text *ubyte, id ulong) HWND
foreign dw_spinbutton_new(text *ubyte, id ulong) HWND
foreign dw_radiobutton_new(text *ubyte, id ulong) HWND
foreign dw_percent_new(id ulong) HWND
foreign dw_slider_new(vertical int, increments int, id ulong) HWND
foreign dw_scrollbar_new(vertical int, id ulong) HWND
foreign dw_checkbox_new(text *ubyte, id ulong) HWND
foreign dw_listbox_new(id ulong, multi int) HWND
foreign dw_listbox_append(handle HWND, text *ubyte) void
foreign dw_listbox_insert(handle HWND, text *ubyte, pos int) void
foreign dw_listbox_list_append(handle HWND, text **ubyte, count int) void
foreign dw_listbox_clear(handle HWND) void
foreign dw_listbox_count(handle HWND) int
foreign dw_listbox_set_top(handle HWND, top int) void
foreign dw_listbox_select(handle HWND, index int, state int) void
foreign dw_listbox_delete(handle HWND, index int) void
foreign dw_listbox_get_text(handle HWND, index int, buffer *ubyte, length uint) void
foreign dw_listbox_set_text(handle HWND, index int, buffer *ubyte) void
foreign dw_listbox_selected(handle HWND) int
foreign dw_listbox_selected_multi(handle HWND, where int) int
foreign dw_percent_set_pos(handle HWND, position uint) void
foreign dw_slider_get_pos(handle HWND) uint
foreign dw_slider_set_pos(handle HWND, position uint) void
foreign dw_scrollbar_get_pos(handle HWND) uint
foreign dw_scrollbar_set_pos(handle HWND, position uint) void
foreign dw_scrollbar_set_range(handle HWND, range uint, visible uint) void
foreign dw_window_set_pos(handle HWND, x long, y long) void
foreign dw_window_set_size(handle HWND, width ulong, height ulong) void
foreign dw_window_set_pos_size(handle HWND, x long, y long, width ulong, height ulong) void
foreign dw_window_get_pos_size(handle HWND, x *long, y *long, width *ulong, height *ulong) void
foreign dw_window_get_preferred_size(handle HWND, width *int, height *int) void
foreign dw_window_set_gravity(handle HWND, horz int, vert int) void
foreign dw_window_set_style(handle HWND, style ulong, mask ulong) void
foreign dw_window_set_icon(handle HWND, icon HICN) void
foreign dw_window_set_bitmap(handle HWND, id ulong, filename *ubyte) int
foreign dw_window_set_bitmap_from_data(handle HWND, id ulong, data *ubyte, len int) int
foreign dw_window_get_text(handle HWND) *ubyte
foreign dw_window_set_text(handle HWND, text *ubyte) void
foreign dw_window_set_tooltip(handle HWND, bubbletext *ubyte) void
foreign dw_window_set_border(handle HWND, border int) int
foreign dw_window_disable(handle HWND) void
foreign dw_window_enable(handle HWND) void
foreign dw_window_capture(handle HWND) void
foreign dw_window_release() void
foreign dw_window_reparent(handle HWND, newparent HWND) void // deprecated
foreign dw_window_set_pointer(handle HWND, pointertype int) void
foreign dw_window_set_focus(handle HWND) void
foreign dw_window_default(window HWND, defaultitem HWND) void
foreign dw_window_click_default(window HWND, next HWND) void
foreign dw_mle_import(handle HWND, buffer *ubyte, startpoint int) uint
foreign dw_mle_export(handle HWND, buffer *ubyte, startpoint int, length int) void
foreign dw_mle_get_size(handle HWND, bytes *ulong, lines *ulong) void
foreign dw_mle_delete(handle HWND, startpoint int, length int) void
foreign dw_mle_clear(handle HWND) void
foreign dw_mle_freeze(handle HWND) void
foreign dw_mle_thaw(handle HWND) void
foreign dw_mle_set_cursor(handle HWND, point int) void
foreign dw_mle_set_visible(handle HWND, line int) void
foreign dw_mle_set_editable(handle HWND, state int) void
foreign dw_mle_set_word_wrap(handle HWND, state int) void
foreign dw_mle_set_auto_complete(handle HWND, state int) void
foreign dw_mle_search(handle HWND, text *ubyte, point int, flags ulong) int
foreign dw_spinbutton_set_pos(handle HWND, position long) void
foreign dw_spinbutton_set_limits(handle HWND, upper long, lower long) void
foreign dw_entryfield_set_limit(handle HWND, limit ulong) void
foreign dw_spinbutton_get_pos(handle HWND) long
foreign dw_checkbox_get(handle HWND) int
foreign dw_checkbox_set(handle HWND, value int) void
foreign dw_tree_insert(handle HWND, title *ubyte, icon HICN, parent HTREEITEM, itemdata ptr) HTREEITEM
foreign dw_tree_insert_after(handle HWND, item HTREEITEM, title *ubyte, icon HICN, parent HTREEITEM, itemdata ptr) HTREEITEM
foreign dw_tree_clear(handle HWND) void
foreign dw_tree_item_delete(handle HWND, item HTREEITEM) void
foreign dw_tree_item_change(handle HWND, item HTREEITEM, title *ubyte, icon HICN) void
foreign dw_tree_item_expand(handle HWND, item HTREEITEM) void
foreign dw_tree_item_collapse(handle HWND, item HTREEITEM) void
foreign dw_tree_item_select(handle HWND, item HTREEITEM) void
foreign dw_tree_item_set_data(handle HWND, item HTREEITEM, itemdata ptr) void
foreign dw_tree_item_get_data(handle HWND, item HTREEITEM) ptr
foreign dw_tree_get_title(handle HWND, item HTREEITEM) *ubyte
foreign dw_tree_get_parent(handle HWND, item HTREEITEM) HTREEITEM
foreign dw_container_setup(handle HWND, flags *ulong, titles **ubyte, count int, separator int) int
foreign dw_icon_load(module ulong, id ulong) HICN
foreign dw_icon_load_from_file(filename *ubyte) HICN
foreign dw_icon_load_from_data(data *ubyte, len int) HICN
foreign dw_icon_free(handle HICN) void
foreign dw_container_alloc(handle HWND, rowcount int) ptr
foreign dw_container_set_item(handle HWND, pointer ptr, column int, row int, data ptr) void
foreign dw_container_change_item(handle HWND, column int, row int, data ptr) void
foreign dw_container_set_column_width(handle HWND, column int, width int) void
foreign dw_container_set_row_title(pointer ptr, row int, title *ubyte) void
foreign dw_container_change_row_title(handle HWND, row int, title *ubyte) void
foreign dw_container_set_row_data(pointer ptr, row int, data ptr) void
foreign dw_container_change_row_data(handle HWND, row int, data ptr) void
foreign dw_container_insert(handle HWND, pointer ptr, rowcount int) void
foreign dw_container_clear(handle HWND, redraw int) void
foreign dw_container_delete(handle HWND, rowcount int) void
foreign dw_container_query_start(handle HWND, flags ulong) *ubyte
foreign dw_container_query_next(handle HWND, flags ulong) *ubyte
foreign dw_container_scroll(handle HWND, direction int, rows long) void
foreign dw_container_cursor(handle HWND, text *ubyte) void
foreign dw_container_cursor_by_data(handle HWND, data ptr) void
foreign dw_container_delete_row(handle HWND, text *ubyte) void
foreign dw_container_delete_row_by_data(handle HWND, data ptr) void
foreign dw_container_optimize(handle HWND) void
foreign dw_container_set_stripe(handle HWND, oddcolor ulong, evencolor ulong) void
foreign dw_filesystem_set_column_title(handle HWND, title *ubyte) void
foreign dw_filesystem_setup(handle HWND, flags *ulong, titles **ubyte, count int) int
foreign dw_filesystem_set_item(handle HWND, pointer ptr, column int, row int, data ptr) void
foreign dw_filesystem_set_file(handle HWND, pointer ptr, row int, filename *ubyte, icon HICN) void
foreign dw_filesystem_change_item(handle HWND, column int, row int, data ptr) void
foreign dw_filesystem_change_file(handle HWND, row int, filename *ubyte, icon HICN) void
foreign dw_container_get_column_type(handle HWND, column int) int
foreign dw_filesystem_get_column_type(handle HWND, column int) int
foreign dw_taskbar_insert(handle HWND, icon HICN, bubbletext *ubyte) void
foreign dw_taskbar_delete(handle HWND, icon HICN) void
foreign dw_screen_width() int
foreign dw_screen_height() int
foreign dw_color_depth_get() ulong
foreign dw_notebook_new(id ulong, top int) HWND
foreign dw_notebook_page_new(handle HWND, flags ulong, front int) ulong
foreign dw_notebook_page_destroy(handle HWND, pageid ulong) void
foreign dw_notebook_page_set_text(handle HWND, pageid ulong, text *ubyte) void
foreign dw_notebook_page_set_status_text(handle HWND, pageid ulong, text *ubyte) void
foreign dw_notebook_page_set(handle HWND, pageid ulong) void
foreign dw_notebook_page_get(handle HWND) ulong
foreign dw_notebook_pack(handle HWND, pageid ulong, page HWND) void
foreign dw_splitbar_new(type int, topleft HWND, bottomright HWND, id ulong) HWND
foreign dw_splitbar_set(handle HWND, percent float) void
foreign dw_splitbar_get(handle HWND) float
foreign dw_menu_new(id ulong) HMENUI
foreign dw_menubar_new(location HWND) HMENUI
foreign dw_menu_append_item(menu HMENUI, title *ubyte, id ulong, flags ulong, end int, check int, submenu HMENUI) HWND
foreign dw_menu_delete_item(menu HMENUI, id ulong) int
foreign dw_menu_item_set_state(menux HMENUI, id ulong, state ulong) void
foreign dw_menu_popup(menu *HMENUI, parent HWND, x int, y int) void
foreign dw_menu_destroy(menu *HMENUI) void
foreign dw_pointer_query_pos(x *long, y *long) void
foreign dw_pointer_set_pos(x long, y long) void
foreign dw_window_function(handle HWND, function ptr, data ptr) void
foreign dw_window_from_id(handle HWND, id int) HWND
foreign dw_mutex_new() HMTX
foreign dw_mutex_close(mutex HMTX) void
foreign dw_mutex_lock(mutex HMTX) void
foreign dw_mutex_trylock(mutex HMTX) int
foreign dw_mutex_unlock(mutex HMTX) void
foreign dw_event_new() HEV
foreign dw_event_reset(eve HEV) int
foreign dw_event_post(eve HEV) int
foreign dw_event_wait(eve HEV, timeout ulong) int
foreign dw_event_close (eve *HEV) int
foreign dw_thread_new(func_ ptr, data ptr, stack int) DWTID
foreign dw_thread_end() void
foreign dw_thread_id() DWTID
foreign dw_exit(exitcode int) void
foreign dw_shutdown() void
foreign dw_render_new(id ulong) HWND
foreign dw_render_redraw(handle HWND) void
foreign dw_color_foreground_set(value ulong) void
foreign dw_color_background_set(value ulong) void
foreign dw_color_choose(value ulong) ulong
foreign dw_font_choose(currfont *ubyte) *ubyte
foreign dw_draw_point(handle HWND, pixmap HPIXMAP, x int, y int) void
foreign dw_draw_line(handle HWND, pixmap HPIXMAP, x1 int, y1 int, x2 int, y2 int) void
foreign dw_draw_rect(handle HWND, pixmap HPIXMAP, fill int, x int, y int, width int, height int) void
foreign dw_draw_polygon(handle HWND, pixmap HPIXMAP, fill int, npoints int, x *int, y *int) void
foreign dw_draw_arc(handle HWND, pixmap HPIXMAP, flags int, xorigin int, yorigin int, x1 int, y1 int, x2 int, y2 int) void
foreign dw_draw_text(handle HWND, pixmap HPIXMAP, x int, y int, text *ubyte) void
foreign dw_font_text_extents_get(handle HWND, pixmap HPIXMAP, text *ubyte, width *int, height *int) void
foreign dw_font_set_default(fontname *ubyte) void
foreign dw_flush() void
foreign dw_pixmap_bitblt(dest HWND, destp HPIXMAP, xdest int, ydest int, width int, height int, src HWND, srcp HPIXMAP, xsrc int, ysrc int) void
foreign dw_pixmap_stretch_bitblt(dest HWND, destp HPIXMAP, xdest int, ydest int, width int, height int, src HWND, srcp HPIXMAP, xsrc int, ysrc int, srcwidth int, srcheight int) int
foreign dw_pixmap_new(handle HWND, width ulong, height ulong, depth int) HPIXMAP
foreign dw_pixmap_new_from_file(handle HWND, filename *ubyte) HPIXMAP
foreign dw_pixmap_new_from_data(handle HWND, data *ubyte, len int) HPIXMAP
foreign dw_pixmap_grab(handle HWND, id ulong) HPIXMAP
foreign dw_pixmap_set_transparent_color(pixmap HPIXMAP, color ulong) void
foreign dw_pixmap_set_font(pixmap HPIXMAP, fontname *ubyte) int
foreign dw_pixmap_destroy(pixmap HPIXMAP) void
foreign dw_pixmap_get_width(pixmap HPIXMAP) ulong
foreign dw_pixmap_get_height(pixmap HPIXMAP) ulong
foreign dw_beep(freq int, dur int) void
foreign dw_debug(format *ubyte, ...) void
foreign dw_vdebug(format *ubyte, args va_list) void
foreign dw_messagebox(title *ubyte, flags int, format *ubyte, ...) int
foreign dw_vmessagebox(title *ubyte, flags int, format *ubyte, args va_list) int
foreign dw_environment_query(env *DWEnv) void
foreign dw_exec(program *ubyte, type int, params **ubyte) int
foreign dw_browse(url *ubyte) int
foreign dw_file_browse(title *ubyte, defpath *ubyte, ext *ubyte, flags int) *ubyte
foreign dw_user_dir() *ubyte
foreign dw_app_dir() *ubyte
foreign dw_app_id_set(appid *ubyte, appname *ubyte) int
foreign dw_dialog_new(data ptr) *DWDialog
foreign dw_dialog_dismiss(dialog *DWDialog, result ptr) int
foreign dw_dialog_wait(dialog *DWDialog) ptr
foreign dw_window_set_data(window HWND, dataname *ubyte, data ptr) void
foreign dw_window_get_data(window HWND, dataname *ubyte) ptr
foreign dw_window_compare(window1 HWND, window2 HWND) int
foreign dw_module_load(name *ubyte, handle *HMOD) int
foreign dw_module_symbol(handle HMOD, name *ubyte, func_ *ptr) int
foreign dw_module_close(handle HMOD) int
foreign dw_timer_connect(interval int, sigfunc ptr, data ptr) HTIMER
foreign dw_timer_disconnect(timerid HTIMER) void
foreign dw_signal_connect(window HWND, signame *ubyte, sigfunc ptr, data ptr) void
foreign dw_signal_connect_data(window HWND, signame *ubyte, sigfunc ptr, discfunc ptr, data ptr) void
foreign dw_signal_disconnect_by_window(window HWND) void
foreign dw_signal_disconnect_by_data(window HWND, data ptr) void
foreign dw_signal_disconnect_by_name(window HWND, signame *ubyte) void
foreign dw_named_event_new(name *ubyte) HEV
foreign dw_named_event_get(name *ubyte) HEV
foreign dw_named_event_reset(eve HEV) int
foreign dw_named_event_post(eve HEV) int
foreign dw_named_event_wait(eve HEV, timeout ulong) int
foreign dw_named_event_close(eve HEV) int
foreign dw_named_memory_new(dest *ptr, size int, name *ubyte) HSHM
foreign dw_named_memory_get(dest *ptr, size int, name *ubyte) HSHM
foreign dw_named_memory_free(handle HSHM, ptr) int
foreign dw_html_action(hwnd HWND, action int) void
foreign dw_html_raw(hwnd HWND, string *ubyte) int
foreign dw_html_url(hwnd HWND, url *ubyte) int
foreign dw_html_javascript_run(hwnd HWND, script *ubyte, scriptdata ptr) int
foreign dw_html_new(id ulong) HWND
foreign dw_clipboard_get_text() *ubyte
foreign dw_clipboard_set_text(str *ubyte, len int) void
foreign dw_calendar_new(id ulong) HWND
foreign dw_calendar_set_date(window HWND, year uint, month uint, day uint) void
foreign dw_calendar_get_date(window HWND, year *uint, month *uint, day *uint) void
foreign dw_print_new(jobname *ubyte, flags ulong, pages uint, drawfunc ptr, drawdata ptr) HPRINT
foreign dw_print_run(print HPRINT, flags ulong) int
foreign dw_print_cancel(print HPRINT) void
foreign dw_notification_new(title *ubyte, imagepath *ubyte, description *ubyte, ...) HWND
foreign dw_notification_send(notification HWND) int

#if __windows__
foreign dw_utf8_to_wchar(utf8string *ubyte) *ushort
foreign dw_wchar_to_utf8(wstring *ushort) *ubyte
#else
foreign dw_utf8_to_wchar(utf8string *ubyte) *uint
foreign dw_wchar_to_utf8(wstring *uint) *ubyte
#end

foreign dw_feature_get(feature DWFEATURE) int
foreign dw_feature_set(feature DWFEATURE, state int) int
foreign _dw_init_thread() void
foreign _dw_deinit_thread() void

/* Partial translation of fcntl.h based on the implementation of Windows */

// _O Globals constants acquired from https://github.com/pilight/windows-cli/blob/master/include/fcntl.h

/* Specifiy one of these flags to define the access mode. */
define _O_RDONLY = 0
define _O_WRONLY = 1
define _O_RDWR = 2

/* Mask for access mode bits in the _open flags. */
define _O_ACCMODE = _O_RDONLY | _O_WRONLY | _O_RDWR

define _O_APPEND = 0x0008 /* Writes will add to the end of the file. */

define _O_RANDOM = 0x0010
define _O_SEQUENTIAL = 0x0020
define _O_TEMPORARY = 0x0040 /* Make the file dissappear after closing. * WARNING: Even if not created by _open! */
define _O_NOINHERIT = 0x0080

define _O_CREAT = 0x0100 /* Create the file if it does not exist. */
define _O_TRUNC = 0x0200 /* Truncate the file if it does exist. */
define _O_EXCL = 0x0400 /* Open only if the file does not exist. */

define _O_SHORT_LIVED = 0x1000

/* NOTE: Text is the default even if the given _O_TEXT bit is not on. */
define _O_TEXT = 0x4000 /* CR-LF in file becomes LF in memory. */
define _O_BINARY = 0x8000 /* Input and output is not translated. */
define _O_RAW = _O_BINARY
define _O_WTEXT = 0x10000
define _O_U16TEXT = 0x20000
define _O_U8TEXT = 0x40000

// From https://github.com/pilight/windows-cli/blob/24d3eb30ca5d1ddeacf02e1ae0491daf2dff6f93/include/io.h#L365
/* Optional third argument is unsigned unPermissions. */
foreign _open(*ubyte, int, ...) int
func alias open(*ubyte, int, ...) => _open
foreign _close(int) int
func alias close(int) => _close

define O_RDONLY = _O_RDONLY
define O_WRONLY = _O_WRONLY
define O_RDWR = _O_RDWR
define O_ACCMODE = _O_ACCMODE
define O_APPEND = _O_APPEND
define O_CREAT = _O_CREAT
define O_TRUNC = _O_TRUNC
define O_EXCL = _O_EXCL
define O_TEXT = _O_TEXT
define O_BINARY = _O_BINARY
define O_TEMPORARY = _O_TEMPORARY
define O_NOINHERIT = _O_NOINHERIT
define O_SEQUENTIAL = _O_SEQUENTIAL
define O_RANDOM = _O_RANDOM

// _S Global Constants from https://github.com/pilight/windows-cli/blob/master/include/sys/stat.h
define _S_IEXEC = 0x0040
define _S_IWRITE = 0x0080
define _S_IREAD = 0x0100

func alias dw_file_open(*ubyte, int, ...) => open

#if __windows__
foreign _dw_convertargs(count *int, start *ubyte, hInstance HINSTANCE) **ubyte
external func WinMain(hInstance HINSTANCE, hPrevInstance HINSTANCE, lpCmdLine LPSTR, nCmdShow int) int {
   argc int
   argv **ubyte = _dw_convertargs(&argc, lpCmdLine, hInstance)
   return dwmain(argc, argv)
}
#else
external func main(argc int, argv **ubyte) int {
    return dwmain(argc, argv)
}
#end

/* `func dwmain(argc int, argv **ubyte) int` will be defined by the user */
